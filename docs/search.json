[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":" Welcome \nmrgsolve user guide. user guide main documentation source \nmrgsolve works best use mrgsolve modeling simulation\nproject. mrgsolve documentation, work \nprogress. currently working transition reference\nresource, rather demonstration. key content user guide includes\nchapter 2 model specification, chapter\n1 model components chapter 7\nsimulation sequence. Installation big topic defer wiki\npage installation help since requirements tend change frequently new\nR releases. content hopefully helpful well. ’m leaving \nplace now, gradually transition “-” demo type\ncontent vignettes repository gallery repository (see\n).Please feel free ask questions anything mrgsolve-related \nissue tracker main github repo: https://github.com/metrumresearchgroup/mrgsolve/issues.","code":""},{"path":"index.html","id":"overview","chapter":"Introduction","heading":"Overview","text":"accessing user guide via html, able see \ntable contents left. lot detail ’m going\ngive high-level overview (high-level \npretty clear pdfbook).Chapter 1 tells mrgsolve model\nobject (like parameters, compartments, C++ functions like)Chapter 2 tells model specification. \ntwo main sections chapter: Section 2.2 lists\ndifferent model code blocks Section 2.3 lists\ndifferent variables can get (set) different code blocksChapter 3 shows format input data setsChapter 4 shows create work simple\ndata set objects called event objectsChapter 5 shows work model matricesChapter 6 tells simulated output object\ncan work itChapter 7 dives simulation sequence, showing\nsteps mrgsolve takes work problemChapter 8 gives details mrgsolve advances \nsystem pharmacokinetic steady stateChapter 9 talks different plugins can use \nadvanced modelingChapter 10 talks modeled events (discontinuities \nsimulation triggered within model rather \ndata set)Chapter 11 collection applied examples different topicsChapter 12 brief questions answers providing bits\ninformation don’t obviously fit another chapterChapter 13 provides links Wiki pages can help \ninstallation","code":""},{"path":"index.html","id":"pdf-version","chapter":"Introduction","heading":"PDF Version","text":"book also available pdf format .","code":""},{"path":"index.html","id":"other-resources","chapter":"Introduction","heading":"Other Resources","text":"Main resource page: mrgsolve.github.ioVignettes: mrgsolve.github.io/vignettesR documentation: mrgsolve.github.io/docsGallery: github.com/mrgsolve/galleryThis book assembled Mon Feb 6 23:19:40 2023 mrgsolve version 1.0.6.9000.","code":""},{"path":"model-components.html","id":"model-components","chapter":"1 Model components","heading":"1 Model components","text":"chapter details different components model mrgsolve. \ncomponent listed maintained within “model object”. \nupdatable S4 object R contains basic information required\nproperly configure simulate model.","code":""},{"path":"model-components.html","id":"component-param","chapter":"1 Model components","heading":"1.1 Parameter list","text":"parameter list updatable set name-value pairs. Referencing name\nitem parameter list substitute current value associated\nname. name “parameter” may certain connotation \nmodeling world, mrgsolve “parameter” category numeric\ndata: covariates (e.g. WT, AGE, SEX), flags, numeric data \ncommonly call “parameter” (e.g. CL VC).parameter list declared code block $PARAM. may \nmultiple $PARAM blocks model, condensed single parameter\nlist stored model object. names numbers parameters \nmodel must declared time model compiled. Also, default\nvalue parameter must declared model compile time, value\nparameter may updated one several ways.parameters model object can queried updated \nparam() function.See also: 2.2.4, ?param R help system \nloading mrgsolve.","code":""},{"path":"model-components.html","id":"central-role-of-parameters-in-planning-simulations","chapter":"1 Model components","heading":"1.1.1 Central role of parameters in planning simulations","text":"data items parameter list just values associated \nname. name added parameter list, name becomes key word\nmrgsolve start recognize input data sets manipulating\nmodel object.example, want include covariate model, say weight\n(WT), ’ll include column data set called WT indicate\nweight patient. crucial also list WT \n$PARAM default value. helps value sensible . \nmrgsolve receives data set prior simulating, WT column matched\nWT parameter name. mrgsolve works way input\ndata set (person person time time), value WT \nupdated symbol WT $MAIN $ODE $TABLE always points\nvalue WT. WT name parameter list, won’t\nmatter data set . listing name $PARAM gets \n“game”.Understanding parameter update mechanism important planning\ncomplicated simulations mrgsolve. Please see information \n3.1 11.3.","code":""},{"path":"model-components.html","id":"component-init","chapter":"1 Model components","heading":"1.2 Compartment list","text":"Like parameter list, compartment list series name-value pairs.\ncompartment list defines number, names, initial values \ncompartment model. names, numbers, order compartment\nmodel established time model compile changes \ncompartment list require re-compilation model.Compartments declared one two code blocks: $INIT $CMT. Nominal\ninitial values must supplied compartment. main difference\n$INIT $CMT $CMT assumes default initial value 0\ncompartment; thus compartment names entered. using\n$INIT, names values must explicitly stated compartment.initial values compartment can queried init()\nfunction. several different ways set initial conditions \nmodel; section 11.2 illustrates several .See also: section 11.2 ?init R help system \nloading mrgsolve.","code":""},{"path":"model-components.html","id":"component-stime","chapter":"1 Model components","heading":"1.3 Simulation time grid","text":"mrgsolve model object stores parameters series time points\noutput simulation. default output time grid \nused -ridden another mechanism.elements simulation time grid : start, end, delta add.\nstart, end, delta passed seq() , , ,\nrespectively. add arbitrary vector additional times simulate.simulation time grid model object may queried stime()\nfunction printing model object R console.See also section 3.2 discussion simulation time grid\ninput data sets 1.3.1 11.4 \nusing time grid objects .","code":""},{"path":"model-components.html","id":"component-tgrid","chapter":"1 Model components","heading":"1.3.1 tgrid objects","text":"tgrid object start, end, delta add attributes. object\nindependent model object. tgrid objects may created combined\ncreate complex sampling designs.See section 11.4 examples usage.","code":""},{"path":"model-components.html","id":"solver-settings","chapter":"1 Model components","heading":"1.4 Solver settings","text":"mrgsolve uses DLSODA solver ODEPACK. Several settings\nsolver stored model object passed solver \nproblem started. Settings include: atol, rtol, maxsteps, hmax,\nhmin, ixpr, mxhnil.","code":""},{"path":"model-components.html","id":"atol","chapter":"1 Model components","heading":"1.4.1 atol","text":"Absolute tolerance parameter. Adjust value lower see state variables\n(compartments) becoming small possibly turning negative. \nexample:Adjusting atol 1E-20 1E-30 prevent .","code":"\nmod <- modlib(\"viral1\", end = 144) . Loading model from cache.\nout <- mrgsim_e(mod, ev(amt = 1000)) %>% filter(V < 0)\n\nout. # A tibble: 6 × 8\n.      ID  time expos        T         I         V  logV logChange\n.   <dbl> <dbl> <dbl>    <dbl>     <dbl>     <dbl> <dbl>     <dbl>\n. 1     1  95    1000 5187630. -2.74e-10 -1.79e-12   NaN       NaN\n. 2     1  97.5  1000 5298189. -3.18e-10 -2.09e-12   NaN       NaN\n. 3     1 120    1000 6252828. -1.55e-10 -1.01e-12   NaN       NaN\n. 4     1 122.   1000 6354547. -2.90e-10 -1.90e-12   NaN       NaN\n. 5     1 125    1000 6455422. -1.97e-10 -1.30e-12   NaN       NaN\n. 6     1 128.   1000 6555459. -7.81e-11 -5.21e-13   NaN       NaN\nmrgsim_e(mod, ev(amt = 1000), atol = 1E-20)  %>% filter(time %in% out$time). # A tibble: 6 × 8\n.      ID  time expos        T        I        V  logV logChange\n.   <dbl> <dbl> <dbl>    <dbl>    <dbl>    <dbl> <dbl>     <dbl>\n. 1     1  95    1000 5187630. 1.33e-11 8.72e-14 -13.1     -18.7\n. 2     1  97.5  1000 5298189. 5.13e-12 3.36e-14 -13.5     -19.2\n. 3     1 120    1000 6252828. 1.01e-15 6.62e-18 -17.2     -22.9\n. 4     1 122.   1000 6354547. 3.94e-16 2.58e-18 -17.6     -23.3\n. 5     1 125    1000 6455422. 1.54e-16 1.01e-18 -18.0     -23.7\n. 6     1 128.   1000 6555459. 5.99e-17 3.92e-19 -18.4     -24.1"},{"path":"model-components.html","id":"rtol","chapter":"1 Model components","heading":"1.4.2 rtol","text":"Relative tolerance parameter. Adjust value lower want \nprecision around calculation state variables system advances.","code":""},{"path":"model-components.html","id":"maxsteps","chapter":"1 Model components","heading":"1.4.3 maxsteps","text":"maximum number steps solver take advancing one\ntime next. solver can’t make maxsteps stop \ngive error message like :might see integrate along time records \ndata set. isn’t necessarily problem, solver might \nadvance many doses get next record limited\nnumber steps can take records stops \nerror.see , increase maxsteps 50000 larger.keep mind sometimes solver can’t make next record\nissues model. might take thousands steps \nmake 24 hours road. case, go back model code \nlook problems coded.","code":"DLSODA-  At current T (=R1), MXSTEP (=I1) steps   \n      taken on this call before reaching TOUT     \nIn above message, I = \n[1] 2000\nIn above message, R = \n[1] 0.0004049985\nDLSODA-  ISTATE (=I1) illegal.\nIn above message, I = \n[1] -1\nDLSODA-  Run aborted.. apparent infinite loop.    \nError in (function (x, data, idata = null_idata, carry.out = character(0),  : \n  error from XERRWD"},{"path":"model-components.html","id":"hmax","chapter":"1 Model components","heading":"1.4.4 hmax","text":"maximum step size. default, solver take steps different\nsizes based happening simulation. Setting hmax tells \nsolver take step larger value. model time \nhours, reducing hmax 0.1 prevent solver taking step\nlarger 0.1 hours tries advance next time. slow\nsimulation bit. sometimes helpful solver starts taking\nlarge steps. don’t recommend using routinely; applications, \nreserved troubleshooting situations. model doesn’t give\nresults want without setting hmax, ’d recommend new setup\nisn’t needed.","code":""},{"path":"model-components.html","id":"hmin","chapter":"1 Model components","heading":"1.4.5 hmin","text":"minimum step size. set know ’re .","code":""},{"path":"model-components.html","id":"ixpr","chapter":"1 Model components","heading":"1.4.6 ixpr","text":"flag enable printing messages R console solver\nswitches non-stiff stiff solving modes. Rarely used.","code":""},{"path":"model-components.html","id":"mxhnil","chapter":"1 Model components","heading":"1.4.7 mxhnil","text":"maximum number messages printed model solving. \nlot messages, keep working model code.","code":""},{"path":"model-components.html","id":"model-functions","chapter":"1 Model components","heading":"1.5 Functions  ","text":"four C++ functions mrgsolve creates manages: PREAMBLE,\nMAIN, ODE, TABLE. function created entire code block \nmodel specification file. user responsible writing correct C++\ncode blocks. mrgsolve parse blocks augment \ncode necessary elements create C++ function.functions may specified order model specification file,\nspecific calling order functions. Recognizing\nunderstanding calling order help understand different\npieces model specification fit together.Just prior starting problem, mrgsolve calls $PREAMBLE. , \nadvance time T1 T2, first $MAIN called, $ODE called\nrepeatedly solver finds values state variables T2, , \nsolution found, $TABLE called calculate derived quantities \nT2 specify variables included model output. ,\nhelpful write model specification files order:$PREAMBLE - called just prior processing first record\ndata set$MAIN - advancing system$ODE - system advances T2$TABLE - advancing systemBut order coded affect model compilation \nsimulation result.","code":""},{"path":"model-components.html","id":"the-preamble-function","chapter":"1 Model components","heading":"1.5.1 The $PREAMBLE function","text":"PREAMBLE function gets called , just prior processing \nfirst record data set. function composed C++ code \nused initialize variables get set prior starting \nproblem.See 2.2.13 details.","code":""},{"path":"model-components.html","id":"the-main-function","chapter":"1 Model components","heading":"1.5.2 The $MAIN function","text":"MAIN function gets called least solver advances\ncurrent time (T1) next time (T2). MAIN function,\nuser may:Set initial conditions compartmentDerive new variables used modelWrite covariate modelsAdd -subject variability quantities structural model\nparameters (e.g. CL VC).addition getting called per record, MAIN function may \ncalled several times prior starting simulation run. MAIN\nfunction also called whenever user queries compartment list.mrgsolve allows access compartment amounts MAIN function. \nimportant remember calling order model functions\n(section 1.5): MAIN called system\nadvances, compartment amounts inside function reflect \npre-advance values. contrast accessing compartment amounts\ninside TABLE function, reflect values \nsystem advances. use cases useful\ncheck pre-advance compartment amounts MAIN, applications\ninteract compartment amounts system advances \nTABLE.See 2.2.7 details.","code":""},{"path":"model-components.html","id":"the-ode-function","chapter":"1 Model components","heading":"1.5.3 The $ODE function","text":"ODE function user writes model differential equations.\nderived quantity depends state variable used \nadvanced system must calculated inside $ODE. , \nfunction called repeatedly simulation run, calculation\ncan moved $ODE (example: $MAIN) .See 2.2.9 details.","code":""},{"path":"model-components.html","id":"the-table-function","chapter":"1 Model components","heading":"1.5.4 The $TABLE function","text":"TABLE function called solver advances time. \npurpose TABLE allow user interact values \nstate variables advancing, potentially derive new variables, \ninsert different outputs table simulated results.See 2.2.11 details.","code":""},{"path":"model-components.html","id":"random-effect-variances","chapter":"1 Model components","heading":"1.6 Random effect variances","text":"mrgsolve model object keeps track arbitrary number block matrices\nused simulate variates multivariate normal distributions.\nUsers can specify OMEGA matrices simulating -subject random effects\n(one draw per individual) SIGMA matrices simulating within-subject\nrandom effects (one draw per observation).user may use revar() function query OMEGA SIGMA.","code":""},{"path":"model-components.html","id":"omega","chapter":"1 Model components","heading":"1.6.1 OMEGA","text":"matrices specified $OMEGA blocks model specification file.OMEGA may queried updated omat() function.","code":""},{"path":"model-components.html","id":"sigma","chapter":"1 Model components","heading":"1.6.2 SIGMA","text":"matrices specified $SIGMA blocks model specification file.SIGMA may queried updated smat() function.","code":""},{"path":"model-specification.html","id":"model-specification","chapter":"2 Model specification","heading":"2 Model specification","text":"chapter details mrgsolve model specification format.","code":""},{"path":"model-specification.html","id":"how-where-to-write-a-model","chapter":"2 Model specification","heading":"2.1 How / where to write a model","text":"two ways write model:Code separate file source R scriptCode inline character string already R scriptWe recommend method 1 (separate file) non-trivial modeling work.\nMethod 2 handy quickly coding model ’ll also see us using\napproach frequently demonstrating use mrgsolve.","code":""},{"path":"model-specification.html","id":"spec-separate-file","chapter":"2 Model specification","heading":"2.1.1 Separate file","text":"Open text editor type model file name \nformat <model-name>.cpp. filename format identifies “name” \nmodel (<model-name>, “stem” file name). extension MUST\n.cpp (mrgsolve currently assumes extension). Note: whole file\nread parsed, everything must valid mrgsolve model\nspecification elements.Use mread() function read parse file. model\ncalled mymodel saved mymodel.cpp (current working directory),\nissue command:mread() returns model object can simulate.","code":"\nmod <- mread(\"mymodel\")"},{"path":"model-specification.html","id":"spec-inline","chapter":"2 Model specification","heading":"2.1.2 Inline / code  ","text":"Often convenient write model right R script. \nmodel might look something like :, created character vector length 1 saved R object\ncalled code. name object irrelevant. code \npassed mrgsolve model definition. mrgsolve gets model\nlike along “name” model, mrgsolve write code \nfile called <model-name>.cpp read right back typed\ncode file (section 2.1.1).parse load model, use mcode() command:mcode() convenience wrapper mread(). mcode writes code \nmymodel.cpp tempdir(), reads back , compiles loads.mcode call equivalent :help, see ?mread , ?mcode R help system loading\nmrgsolve.","code":"\ncode <- '\n$PARAM CL = 1, VC = 20\n$PKMODEL ncmt=1\n'\nmod <- mcode(\"mymodel\", code)\nmod <- mread(\"mymodel\", tempdir(), code)"},{"path":"model-specification.html","id":"code-blocks","chapter":"2 Model specification","heading":"2.2 Code blocks","text":"","code":""},{"path":"model-specification.html","id":"about-code-blocks","chapter":"2 Model specification","heading":"2.2.1 About code blocks","text":"Block identifierDifferent types code organized model specification file \nseparated block identifiers. two ways formulate block\nidentifiers can used mrgsolve. first type, dollar-sign \nplaced start block nameFor example, block parameters beThe second way write bracketsThere functional difference dollar-sign notation \nbrackets. model specification code saved file .cpp\nextension, code editor may make certain assumptions formatting \nstyling code. Using brackets -likely work better \neditor case.Block identifiers case-insensitive also workUsers free include block code line block identifier,\nmust include space identifier. example, parser \nrecognize $PARAM CL = 1 $PARAMCL=1 parameters.Block syntax\nDifferent blocks may require different syntax. example, code written \n$PARAM parsed R parser generally need adhere \nR syntax requirements. hand, code $MAIN, $ODE, \n$TABLE used make functions C++ therefore need \nvalid C++ code, including terminal ; line.Block options\nOptions may specified code blocks signal code \nparsed used simulation.Block options can boolean case indicate option name\nnothing following. example, indicate block = TRUE \nOMEGA matrix, writeHere @block indicates block = TRUE. Starting mrgsolve 1.0.0, block\noptions can negated writing ! @ option name. \nrequest non-block (diagonal) OMEGA matrixBut note well diagonal default configuration OMEGA, \nnever necessary write .non-boolean block options state name value assigned\nname. example, wanted assign labels ETAs \nOMEGA block, ’d writeThis essentially sets labels equal vector c(\"ECL\", \"EVC\").note two specific boolean options (@object @as_object) \nsimilar function across multiple blocks.","code":"$BLOCKNAME\n<block-code>$PARAM\nCL = 1[ BLOCKNAME ] \n<block-code>$param \nCL = 1[ param ] \nCL = 1$OMEGA @block \n1 2 3$OMEGA @!block \n1 2 3$OMEGA @labels ECL EVC\n1 2"},{"path":"model-specification.html","id":"programmatic-or-bulk-initialization","chapter":"2 Model specification","heading":"2.2.2 Programmatic or bulk initialization","text":"following describes syntax initializing blocks R objects using\nR code. can helpful, say, need initialize 50x50\nOMEGA matrix series systematically named parameters. describe\n@object @as_object options available select blocks.@object option lets name object defined $ENV use \ninstantiate block data. example, specify series parameters\nusing @object option, ’d writeThis tells mrgsolve object called params \n$ENV environment mrgsolve use define names \nvalues. trivial example show simple series parameters\ndefined. However, intended use functionality allow\nefficient creation large, systematically-named series parameters \nlarge model.@as_object option boolean option tells mrgsolve \nblock code actually return object (rather asking mrgsolve \nlook $ENV object). equivalent specification block\n:following blocks contain @object @as_object options:$PARAM$THETA$CMT$INT$OMEGA$SIGMAPlease see specific block documentation details specific\ntype object returned syntax invoked.","code":"$ENV\nparams <- list(CL = 1, V = 20, KA = 1.2)\n\n$PARAM @object params$PARAM @as_object\nlist(CL = 1, V = 20, KA = 1.2)"},{"path":"model-specification.html","id":"block-prob","chapter":"2 Model specification","heading":"2.2.3 $PROB  ","text":"Syntax: textMultiple allowed: yesOptions: @annotated, @covariatesUse block make notes model. restrictions \ntext gets entered . mrgsolve routinely process text\nway, except rendering model document. Frequently, \nwrite text markdown format render nicely \nmodel document. completely optional.See annotated model section 11.1 example.","code":""},{"path":"model-specification.html","id":"block-param","chapter":"2 Model specification","heading":"2.2.4 $PARAM  ","text":"Syntax: RMultiple allowed: yesOptions: @annotated, @covariates, @object, @as_objectDefine parameter list current model. Parameters names associated\nvalues can used throughout model. value must given\nevery parameter name. Names (numbers) parameters must set \ntime model compiled, parameter values may updated without\nre-compiling model.@covariates option allows tag collection parameters \n“covariates”. change functionality model simulation\nworkflow way, allows get list covariate names \nmodel object.Example:Annotated example:See popex model example using @covariatesthenNotes:Multiple blocks allowedValues evaluated R interpreterThe @object @as_object options name return named list \nparameters.See also: section 2.2.22 2.2.5.See ?param R help system loading mrgsolve.","code":"[ PARAM ] CL = 1, VC = 20, KA = 1.2\nKM = 25, VMAX = 400, FLAG = 1, WT = 80\nSEX = 0, N = sqrt(25)[ PARAM ] @annotated\nCL :   1 : Clearance (L/hr)\nVC :  20 : Volume of distribution (L)\nKA:  1.2 : Absorption rate constant (1/hr). \n. Model file: popex.cpp \n. \n. $PARAM\n. TVKA = 0.5, TVCL = 1, TVV = 24\n. \n. $PARAM\n. @covariates\n. WT = 70\nmod <- modlib(\"popex\")\nas.list(mod)$covariates. [1] \"WT\""},{"path":"model-specification.html","id":"block-fixed","chapter":"2 Model specification","heading":"2.2.5 $FIXED  ","text":"Syntax: RMultiple allowed: yesOptions: @annotated, @object, @as_objectLike $PARAM, $FIXED used specify name=value pairs. Unlike\n$PARAM, however, values associated names $FIXED able\nupdated.default, names $FIXED associated value \nC++ preprocessor #define statement.Usually, $FIXED used large number \nparameters (\\(>\\) 100 200). parameters never need\nupdated, can move $FIXED block get modest gain\nefficiency simulation.Items $FIXED shown parameters queried.Example:Annotated example:See also: section 2.2.4 2.2.22.Notes:Multiple blocks allowedValues evaluated R interpreter","code":"[ PARAM ] CL = 2, VC = 20\n\n[ FIXED ]\ng = 9.8$FIXED @annotated\ng : 9.8 : Acceleration due to gravity (m/s^2)"},{"path":"model-specification.html","id":"cmt-and-init","chapter":"2 Model specification","heading":"2.2.6 $CMT and $INIT","text":"Syntax: textMultiple allowed: yesOptions: @annotated, @object, @as_objectDeclare names compartments model.$CMT give names compartments; initial values assumed 0For $INIT give name initial value compartmentsNote $CMT $INIT declare compartments, compartment name\nget declared either $CMT $INIT, never .Examples:Annotated examples:@object @as_object options name return named list \ncompartments initial values used $INIT character vector\ncompartment names used $CMT.See ?init R help system loading mrgsolve.","code":"[ CMT ] GUT CENT RESPONSE[ INIT ] GUT  = 0, CENT = 0, RESPONSE = 25[ CMT ] @annotated\nGUT      : Dosing compartment (mg)\nCENT     : Central PK compartment (mg)\nRESPONSE : Response$INIT @annotated\nGUT      :   0 : Dosing compartment (mg)\nCENT     :   0 : Central PK compartment (mg)\nRESPONSE :  25 : Response"},{"path":"model-specification.html","id":"block-main","chapter":"2 Model specification","heading":"2.2.7 $MAIN  ","text":"Syntax: C++Multiple allowed: noThis code block two main purposes:Derive new algebraic relationships parameters, random, effects \nderived variablesSet initial conditions model compartmentsFor users familiar NONMEM, $MAIN similar $PK.$MAIN wrapped C++ function compiled / loaded mrgsolve.\nMAIN function gets called just prior advancing system \ncurrent time next time record data set. $MAIN also\ngets called several times starting problem (NEWIND == 0) \njust prior simulating individual (NEWIND == 1). Finally, $MAIN\ngets called every time model initial conditions queried init().New variables may declared $MAIN. See section 2.5\ndetails.Examples:","code":"[ CMT ] CENT RESP\n\n[ PARAM ] KIN = 100, KOUT = 2, CL = 1, VC = 20\n\n[ MAIN ]\n\nRESP_0 = KIN/KOUT;\n\ndouble ke = CL/VC;"},{"path":"model-specification.html","id":"block-pk","chapter":"2 Model specification","heading":"2.2.8 $PK  ","text":"alias $MAIN.","code":""},{"path":"model-specification.html","id":"block-ode","chapter":"2 Model specification","heading":"2.2.9 $ODE  ","text":"Syntax: C++Multiple allowed: noOptions: @paramUse $ODE define model differential equations. compartments assign\nvalue differential equation dxdt_CMT CMT name\ncompartment. dxdt_ equation may function model\nparameters (via $PARAM), current value compartment (CMT)\nuser-derived variable.example:important make sure dxdt_ expression defined \nevery compartment listed $CMT $INIT, even dxdt_CMT = 0;$ODE function called repeatedly simulation run. \nwise many calculations possible outside $ODE, usually \n$MAIN. remember calculation depends amount \ncompartment helps determine dxdt_ expression model must \nwritten $ODE.New variables may declared $ODE. See section 2.5\ndetails.example:model needs refer current time, use SOLVERTIME variable.Notes:$ODE written C++ syntax; every line must end ;may one $ODE block model","code":"[ CMT ] GUT CENT\n\n[ ODE ]\ndxdt_GUT = -KA*GUT;\ndxdt_CENT = KA*GUT - KE*CENT;$CMT CENT RESP\n$PARAM VC = 100, KE = 0.2, KOUT = 2, KIN = 100\n$ODE\ndouble CP = CENT/VC;\ndouble INH = CP/(IMAX+CP)\n\ndxdt_CENT = -KE*CENT;\ndxdt_RESP =  KIN*(1 - INH) - RESP*KOUT;"},{"path":"model-specification.html","id":"block-des","chapter":"2 Model specification","heading":"2.2.10 $DES  ","text":"alias $ODE.","code":""},{"path":"model-specification.html","id":"block-table","chapter":"2 Model specification","heading":"2.2.11 $TABLE  ","text":"Syntax: C++Multiple allowed: noUse $TABLE interact parameters, compartment values, \nuser-defined variables system advances next time.example:NOTE\nmrgsolve formerly table() macro inserting derived values \nsimulated output. macro deprecated. way insert\nderived values simulated output via $CAPTURE.NOTE\nvariables marked capture (see 2.2.15), values \nvariables saved end $TABLE function. process\ncarried automatically mrgsolve therefore requires user\nintervention.","code":"[ TABLE ]\ndouble CP = CENT/VC;"},{"path":"model-specification.html","id":"block-error","chapter":"2 Model specification","heading":"2.2.12 $ERROR  ","text":"alias $TABLE.","code":""},{"path":"model-specification.html","id":"block-preamble","chapter":"2 Model specification","heading":"2.2.13 $PREAMBLE  ","text":"Syntax: C++Multiple allowed: noThis fourth C++ code block. called two different settings:Immediately prior starting simulation runImmediately prior calling $MAIN calculating initial conditions$PREAMBLE function allows set C++ environment. \ncalled one time simulation run (right start). code\nblock typically used configure initialize C++ variables data\nstructures declared $GLOBAL.example:example, want use numeric vector x declare $GLOBAL\ncan use anywhere else code (declaration also made \nunnamed namespace ensure variable local model file).\n, $PREAMBLE, put 3 numbers vector use x \n$MAIN. Since $MAIN, $TABLE (especially) $ODE called repeatedly\nsimulation run progresses, put initialization x $PREAMBLE\nmake sure initialization x happens .Notes:$PREAMBLE written C++ syntax; every line must end ;may one $PREAMBLE block modelLike $MAIN, $ODE $TABLE, double, int bool variables\ninitialized $PREAMBLE actually initialized global (within \nmodel file)See also: 2.2.21.","code":"[ PLUGIN ] Rcpp\n\n[ GLOBAL ]\nnamespace{\n  Rcpp::NumericVector x;\n}\n\n[ PREAMBLE ]\nx.push_back(1);\nx.push_back(2);\nx.push_back(3);\n\n[ MAIN ]\n<some code that uses x vector>"},{"path":"model-specification.html","id":"block-pred","chapter":"2 Model specification","heading":"2.2.14 $PRED  ","text":"Syntax: C++Multiple allowed: noUse $PRED write model without differential equations. block,\nwrite algebraic expressions derived parameters, response, \nderived output quantities.example:example, entire model written $PRED block. \nerror include following blocks $PRED used: $MAIN,\n$TABLE, $PKMODEL, $ODE, $CMT, $INIT.See section 3.6 additional information regarding data sets\nuse $PRED block.","code":"[ PARAM ] TVE0 = 100, AUC50 = 100, IMAX = 40, AUC = 0\n\n[ PRED ]\ndouble E0 = EVE0*exp(ETA(1));\n\ndouble RESP = E0 - IMAX*AUC/(AUC50+AUC);"},{"path":"model-specification.html","id":"block-capture","chapter":"2 Model specification","heading":"2.2.15 $CAPTURE  ","text":"Syntax: textMultiple allowed: yesOptions: @annotatedThis block identify variables captured simulated\noutput.example:construct result 4 additional columns simulated output\nnames , B, C, yes.Users can also rename captured variables providing \nnewname = oldname specification.example, names captured data items \nWEIGHT,TVCL,CL,ETA_1.Users can use capture type declare variables $MAIN $TABLE.\ncapture types really doubles, using type signal mrgsolve\nautomatically capture value. example:Since used type capture DV, DV show column \nsimulated data.Annotated example:New variables may declared $TABLE. See section 2.5 \ndetails.","code":"[ PARAM ] A = 1, B = 2\n\n[ MAIN ]\ndouble C = 3;\nbool yes = true;\n\n[ CAPTURE ] A B C yes$PARAM WT = 70, THETA1 = 2.2\n\n$MAIN\ndouble CL = THETA1*pow(WT/70,0.75)*exp(ETA(1));\n\n$OMEGA 1\n\n$CAPTURE WEIGHT = WT TVCL = THETA2 CL  ETA(1)$PARAM VC = 300\n\n$CMT CENT\n\n$TABLE\ncapture DV = (CENT/VC);$MAIN\ndouble CLi = TVCL*exp(ECL);\n\n$TABLE\ndouble DV = (CENT/VC)*exp(PROP);\n\n$CAPTURE @annotated\nCLi : Individual clearance (L/hr)\nDV  : Plasma concentration (mcg/ml)"},{"path":"model-specification.html","id":"block-omega","chapter":"2 Model specification","heading":"2.2.16 $OMEGA  ","text":"Syntax: textMultiple allowed: yesOptions: @annotated, @block, @correlation, @labels, @name, @object, @as_objectSee ?modMATRIX details options block.Use block enter variance/covariance matrices subject-level random\neffects drawn multivariate normal distribution. random effects \nassumed mean 0. diagonal elements block matrices assumed\ncorrelation coefficients @correlation option used (see ).default, diagonal matrix assumed. :generate 3x3 omega matrix.block matrix may entered using block=TRUE. :generate 2x2 matrix covariance 0.02.2x2 matrix -diagonal element correlation, covariance\ncan specified like :, correlation 0.67. mrgsolve calculate covariances \nsubstitute values. matrix stored used \ncovariances, correlation.name can assigned matrix:distinguish multiple $OMEGA blocks facilitate updating later. model preceding example two\n$OMEGA matrices: 2x2 4x4.Annotated example (diagonal matrix):Annotated example (block matrix):@object @as_object options name return square numeric\nmatrix. rownames included matrix, used \nform labels realized ETAs.Notes:Multiple $OMEGA blocks allowed","code":"$OMEGA\n1 2 3$OMEGA @block\n0.1 0.02 0.3$OMEGA @correlation\n0.1 0.67 0.3$OMEGA @name PK @block\n0.2 0.02 0.3\n\n$OMEGA @name PD\n0.1 0.2 0.3 0.5$OMEGA @annotated\nECL: 0.09 : ETA on clearance\nEVC: 0.19 : ETA on volume\nEKA: 0.45 : ETA on absorption rate constant$OMEGA @annotated @block\nECL: 0.09 : ETA on clearance\nEVC: 0.001 0.19 : ETA on volume\nEKA: 0.001 0.001 0.45 : ETA on absorption rate constant"},{"path":"model-specification.html","id":"block-sigma","chapter":"2 Model specification","heading":"2.2.17 $SIGMA  ","text":"Syntax: textMultiple allowed: yesOptions: @annotated, @block, @correlation, @labels, @name, @object, @as_objectSee ?modMATRIX details options block.Use block enter variance/covariance matrices within-subject random\neffects drawn multivariate normal distribution. random effects \nassumed mean 0. diagonal elements block matrices assumed\ncorrelation coefficients @correlation option used (see ).@object @as_object options name return square numeric\nmatrix. rownames included matrix, used \nform labels realized EPS values.$SIGMA block functions like $OMEGA block. See $OMEGA details.","code":""},{"path":"model-specification.html","id":"set","chapter":"2 Model specification","heading":"2.2.18 $SET","text":"Syntax: RMultiple allowed: noUse code block set different options simulation. Use \nname = value format, value evaluated R interpreter.options can entered $SET passed update.example:, set simulation end time 240, set time difference \ntwo adjacent time points 0.25 time units, request RESP\ncompartment simulated output.","code":"[ SET ] end = 240, delta = 0.5, req = \"RESP\""},{"path":"model-specification.html","id":"global","chapter":"2 Model specification","heading":"2.2.19 $GLOBAL","text":"Syntax: C++Multiple allowed: noThe $GLOBAL block writing C++ code outside $MAIN,\n$ODE, $TABLE.artificial limit sort C++ code can go $GLOBAL.\nHowever two -common uses:Write #define preprocessor statementsDefine global variables, usually variables double, bool,\nint (see 2.5)Preprocessor directives\nPreprocessor #define directives direct substitutions C++\npreprocessor makes prior compiling code.example:preprocessor directive included, everywhere preprocessor finds\nCP token substitute (CENT/VC). CENT VC must \ndefined ratio CENT VC calculated depending whatever\ncurrent values . Notice included parentheses around (CENT/VC).\nmakes sure ratio two taken first, \noperations involving CP.Declaring global variables\nSometimes, may wish use global variables control \nget declared.construct, boolean variable cure declared defined right\nmodel compiled.Declare bulkIf large number variables declare, can \nbulk $GLOBAL. example, know need long list double\nprecision variable covariate modeling, can declare like\n:isn’t terribly long list, let’s pretend illustrate \n. can also declare int, bool types like . ’ve\ninitialized last two (TVVQ TVV3) illustrate . ’s\ngood practice necessary long everything gets\ninitialized something used.","code":"[ GLOBAL ]\n#define CP (CENT/VC)$GLOBAL\nbool cure = false;[ global ] \ndouble TVCL, TVV2, TVQ = 0, TVV3 = 0;\n\n[ main ] \n\nTVCL = THETA1 * pow(WT / 70.0, 0.75);\nTVV2 = THETA2 * WT / 70.0;\nTVQ  = THETA3 * pow(WT / 70.0, 0.75);\nTVV3 = THETA4 * WT / 70.0;"},{"path":"model-specification.html","id":"pkmodel","chapter":"2 Model specification","heading":"2.2.20 $PKMODEL","text":"Syntax: RMultiple allowed: noThis code block implements one- two-compartment PK model system\ncalculated algebraic equations, ODEs. mrgsolve handles \ncalculations error generated $PKMODEL $ODE blocks \nincluded model specification file.options-block. user must specify number compartments\n(1 2) use model well whether include depot dosing\ncompartment. See ?PKMODEL details block, including\nspecific requirements symbols must defined model\nspecification file.$CMT $INIT block must also included appropriate number \ncompartments. Compartment names, however, may determined user.Example:version 0.8.2, can alternatively specify compartments\nright $PKMODEL block:Specifying three compartments depot=TRUE implies ncmt=2. Notice \nseparate $CMT block appropriate cmt specified $PKMODEL.","code":"[ CMT ] GUT CENT PERIPH\n\n[ PKMODEL ] ncmt=2, depot=TRUE$PKMODEL cmt=\"GUT CENT PERIPH\", depot = TRUE"},{"path":"model-specification.html","id":"block-plugin","chapter":"2 Model specification","heading":"2.2.21 $PLUGIN  ","text":"Syntax: textMultiple allowed: noPlugins way add extensions mrgsolve model. Plugins can either\nlink model external libraries (like boost Rcpp) can\nopen access additional functionality provided mrgsolve .Plugins listed discussed detail Chapter 9.UsageTo invoke plugin, list plugin name code block. requesting\nRcpp headers model, callAvailable pluginsThe following plugins make additional mrgsolve-specific functionality availablemrgx: extra C++ functions (see )tad: track time dose modelN_CMT: get number compartmentThe following plugins give different model specification experienceautodec: mrgsolve find assignments model automatically\ndeclare doublesnm-vars: NONMEM look feel compartmental models; use F1,\n(1) DADT(1) rather F_GUT, GUT dxdt_GUTThe following plugin lets customize model compiledCXX11: compile model C++11 standard; adds\ncompiler flag -std=c++11The following plugins let link external librariesRcpp: include Rcpp headers int modelBH: include boost headers modelRcppArmadillo: include Armadillo headers modelNote Rcpp, RcppArmadillo BH allow link \nheaders. take advantage , need know use Rcpp,\nboost etc. BH plugin, headers included ; must\ninclude proper headers want use $GLOBAL.mrgx\ngeneral collection functions made available.Functions provided mrgx:T get<T>(std::string <pkgname>, std::string <objectname>)\ngets object Rcpp-representable type (T) package\ngets object Rcpp-representable type (T) packageT get<T>(std::string <objectname)\ngets object Rcpp-representable type (T) .GlobalEnv\ngets object Rcpp-representable type (T) .GlobalEnvT get<T>(std::string <objectname>, databox& self)\ngets object Rcpp-representable type (T) $ENV\ngets object Rcpp-representable type (T) $ENVdouble rnorm(double mean, double sd, double min, double max)\nSimulate one variate normal distribution min max\nSimulate one variate normal distribution min maxdouble rlognorm(double mean, double sd, double min, double max)\nmrgx::rnorm, simulated value passed exp simulating\nmrgx::rnorm, simulated value passed exp simulatingRcpp::Function mt_fun()\nReturns mrgsolve::mt_fun; usually used declaring R function $GLOBAL\nExample: Rcpp::Function print = mrgx::mt_fun();\nReturns mrgsolve::mt_fun; usually used declaring R function $GLOBALExample: Rcpp::Function print = mrgx::mt_fun();IMPORTANT functions mrgx namespace. , order\ncall functions must include mrgx:: namespace identifier \nfront function name. example, don’t use rnorm(50,20,40,140); use\nmrgx::rnorm(50,20,40,140).","code":"$PLUGIN Rcpp"},{"path":"model-specification.html","id":"some-examples","chapter":"2 Model specification","heading":"2.2.21.1 Some examples","text":"Get numeric vector $ENVGet print function package:baseNote declare print $GLOBAL use mt_fun() place holder.Simulate truncated normal variables\nsimulates weight mean 80, standard deviation 20 greater\n40 less 140.See also: 2.2.13.","code":"[ PLUGIN ] Rcpp mrgx\n\n[ ENV ]\nx <- c(1,2,3,4,5)\n\n[ GLOBAL ]\nRcpp::NumericVector x;\n\n[ PREAMBLE ]\nx = mrgx::get<Rcpp::NumericVector>(\"x\", self);$PLUGIN Rcpp mrgx\n\n$GLOBAL\nRcpp::Function print = mrgx::mt_fun();\n\n$PREAMBLE\nprint = mrgx::get<Rcpp::Function>(\"base\", \"print\");\n\n$MAIN\nprint(self.rown);$PLUGIN Rcpp mrgx\n\n$MAIN\nif(NEWIND <=1) {\n  double WT = mrgx::rnorm(80,20,40,140);\n}"},{"path":"model-specification.html","id":"block-theta","chapter":"2 Model specification","heading":"2.2.22 $THETA  ","text":"Syntax: textMultiple allowed: yesOptions: @annotated, @name, @object, @as_objectUse code block efficient way add parameter list names\ndetermined prefix number. default, prefix THETA \nnumber sequentially numbers input values.example:equivalent toAnnotated example:change prefix, use @name optionwould equivalent toThe @object @as_object options name return unnamed vector\nparameter values (names ignored).See also: 2.2.4.","code":"[ THETA ]\n0.1 0.2 0.3$PARAM THETA1 = 0.1, THETA2 = 0.2, THETA3 = 0.3$THETA @annotated\n0.1 : Typical value of clearance (L/hr)\n0.2 : Typical value of volume (L)\n0.3 : Typical value of ka (1/hr)$THETA @name theta\n0.1 0.2 0.3[ PARAM ] theta1 = 0.1, theta2 = 0.2, theta3 = 0.3"},{"path":"model-specification.html","id":"block-nmxml","chapter":"2 Model specification","heading":"2.2.23 $NMXML  ","text":"Syntax: RMultiple allowed: yesThe $NMXML block lets read incorporate results NONMEM run \nmrgsolve model. NONMEM run, THETA imported \nparameter list (see 2.2.4 1.1), OMEGA \ncaptured $OMEGA block (2.2.16) SIGMA \ncaptured $SIGMA block (2.2.17). Users may optionally omit\none imported.$NMXML contains project argument run argument. default, \nestimates read file project/run/run.xml. , \nassumed directory named run inside project\ndirectory $NMXML find run.xml. NONMEM run directories may\norganized way compatible default. case,\nneed provide file argument, path \nrun.xml file, either full path path relative current\nworking directory.model object obtained, path xml file formed\nsource imported parameters can retrieved coercing \nmodel object list looking nm_import:help arguments / options $NMXML, please see ?nmxml\nhelp topic R session loading mrgsolve package.exampleThere NONMEM run embedded mrgsolve packageWe can create mrgsolve control stream import THETA, OMEGA \nSIGMA run using $NMXML code block.NOTE: order use code, need install xml2 package.root argument: please use root = \"cppfile\" argument going forward.mrgsolve 0.11.0, added argument called root $NMXML \ntells mrgsolve location read xml file . \ndefault behavior \"working\" directory. case, mrgsolve\nassumes xml file can found relative “working”\ndirectory. value root can take \"cppfile\". \nroot = \"cppfile\", mrgsolve look xml file directory\nrelative model source code file located. Please\ntake look section 2.2.24 discussion examples.Please see ?nmxml help topic information arguments can\npassed $NMXML.See also: 2.2.24.","code":"\nmod <- modlib(\"1005\", compile = FALSE)\n\nas.list(mod)$nm_import\npath <- file.path(path.package(\"mrgsolve\"),\"nonmem\")\nlist.files(path, recursive=TRUE).  [1] \"1005/1005.cat\"    \"1005/1005.coi\"    \"1005/1005.cor\"    \"1005/1005.cov\"   \n.  [5] \"1005/1005.cpu\"    \"1005/1005.ctl\"    \"1005/1005.ext\"    \"1005/1005.grd\"   \n.  [9] \"1005/1005.lst\"    \"1005/1005.phi\"    \"1005/1005.shk\"    \"1005/1005.shm\"   \n. [13] \"1005/1005.tab\"    \"1005/1005.xml\"    \"1005/1005par.tab\" \"1005/INTER\"      \n. [17] \"2005/2005.ext\"\ncode <- '\n$NMXML\nrun = 1005\nproject = path\nroot = \"cppfile\"\n\nolabels = c(\"ECL\", \"EVC\", \"EKA\")\nslabels = c(\"PROP\", \"ADD\")\n\n$MAIN\ndouble CL = THETA1*exp(ECL);\ndouble V2 = THETA2*exp(EVC);\ndouble KA = THETA3*exp(EKA);\ndouble Q = THETA4;\ndouble V3 = THETA5;\n\n$PKMODEL ncmt=2, depot=TRUE\n\n$CMT GUT CENT PERIPH\n\n$TABLE\ndouble CP = (CENT/V2)*(1+PROP) + ADD/5;\n\n$CAPTURE CP\n\n$SET delta=4, end=96\n'\nmod <- mcode(\"nmxml\", code, quiet = TRUE)\n\nmod. \n. \n. ----------------  source: nmxml.cpp  ----------------\n. \n.   project: /private/var/fol.../T/RtmpRhpojT\n.   shared object: nmxml-so-4f0114fd9920 \n. \n.   time:          start: 0 end: 96 delta: 4\n.                  add: <none>\n. \n.   compartments:  GUT CENT PERIPH [3]\n.   parameters:    THETA1 THETA2 THETA3 THETA4 THETA5\n.                  THETA6 THETA7 [7]\n.   captures:      CP [1]\n.   omega:         3x3 \n.   sigma:         2x2 \n. \n.   solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n. ------------------------------------------------------\nparam(mod). \n.  Model parameters (N=7):\n.  name   value  . name   value\n.  THETA1 9.51   | THETA5 113  \n.  THETA2 22.8   | THETA6 1.02 \n.  THETA3 0.0714 | THETA7 1.19 \n.  THETA4 3.47   | .      .\nrevar(mod). $omega\n. $...\n.              [,1]        [,2]        [,3]\n. ECL:   0.21387884  0.12077020 -0.01162777\n. EVC:   0.12077020  0.09451047 -0.03720637\n. EKA:  -0.01162777 -0.03720637  0.04656315\n. \n. \n. $sigma\n. $...\n.              [,1]      [,2]\n. PROP:  0.04917071 0.0000000\n. ADD:   0.00000000 0.2017688"},{"path":"model-specification.html","id":"block-nmext","chapter":"2 Model specification","heading":"2.2.24 $NMEXT  ","text":"Syntax: RMultiple allowed: yesLike $NMXML, $NMEXT allows import $THETA, $OMEGA, $SIGMA\nNONMEM run mrgsolve model, estimates read \n.ext file output. $NMEXT able import NONMEM estimates much\nfaster $NMXML loading sampling based methods (mainly\nMETHOD=BAYES).can load mode $NMXML example following\ncode:model object obtained, path ext file formed\nsource imported parameters can retrieved coercing \nmodel object list looking nm_import. See $NMXML topic\nsection 2.2.23 example equivalent functionality.IMPORTANT: $NMEXT works similarly $NMXML, one\nkey difference two: using $NMEXT, always get one\n$OMEGA matrix one $SIGMA matrix, regardless block structure used\nNONMEM control stream. using $NMXML, get block\nstructure mrgsolve model NONMEM model. example: \nNONMEM control stream, $OMEGA one 2x2 matrix one 3x3 matrix. Importing\nestimates $NMEXT give one 5x5 matrix, importing\nestimates $NMXML give list one 2x2 one 3x3 matrix.root argument: please use root = \"cppfile\" argument going forward.mrgsolve 0.11.0, added argument called root $NMEXT \ntells mrgsolve location read ext file . \ndefault behavior \"working\" directory. case, mrgsolve\nassumes ext file can found relative “working”\ndirectory. value root can take \"cppfile\". \nroot = \"cppfile\", mrgsolve look ext file directory\nrelative model source code file located.recommend users start using root argument set “cppfile”.\neventually become default. example:tells mrgsolve find nonmem run back two directories (../../)\nmodel --> pk --> 1005 relative mrgsolve model\nfile located. contrast previous expected behavior \npath relative current working directory.also note users pass absolute path, relative path\ndoesn’t matter . Users free use pathing tools generate \nabsolute path project. example, ::() function can\nused like thisWhen used proper context, () generate absolute path \nprojects root directory nonmem project directory. Please refer \n::() documentation proper use function.See ?nmext R help topic arguments can passed $NMEXT block.\nNotably, user can select function read ext file.default,\nmrgsolve try load data.table use fread function. \ndata.table can’t loaded, mrgsolve use utils::read.table.See also: 2.2.23.","code":"\npath <- file.path(path.package(\"mrgsolve\"),\"nonmem\")\n\ncode <- '\n$NMEXT\nrun = 1005\nproject = path\nroot = \"cppfile\"\n\nolabels = c(\"ECL\", \"EVC\", \"EKA\")\nslabels = c(\"PROP\", \"ADD\")\n\n$MAIN\ndouble CL = THETA1*exp(ECL);\ndouble V2 = THETA2*exp(EVC);\ndouble KA = THETA3*exp(EKA);\ndouble Q = THETA4;\ndouble V3 = THETA5;\n\n$PKMODEL ncmt=2, depot=TRUE\n\n$CMT GUT CENT PERIPH\n\n$TABLE\ndouble CP = (CENT/V2)*(1+PROP) + ADD/5;\n\n$CAPTURE CP\n\n$SET delta = 4, end = 96\n'\nmod <- mcode(\"nmext\", code, quiet=TRUE)\n\nparam(mod). \n.  Model parameters (N=7):\n.  name   value  . name   value\n.  THETA1 9.51   | THETA5 113  \n.  THETA2 22.8   | THETA6 1.02 \n.  THETA3 0.0714 | THETA7 1.19 \n.  THETA4 3.47   | .      .$NMEXT\nrun = 1005\nproject = \"../../model/pk\"\nroot = \"cppfile\"$NMEXT\nrun = 1005\nproject = here::here(\"model/pk\")"},{"path":"model-specification.html","id":"block-include","chapter":"2 Model specification","heading":"2.2.25 $INCLUDE  ","text":"Syntax: textMultiple allowed: noTo include header file(s) model use $INCLUDEormrgsolve insert proper #include preprocessor directives C++\ncode gets compiled.RequirementsAll header files listed $INCLUDE assumed (expected) \nproject directory; don’t use $INCLUDE header files \nlocationAn error generated header file existAn error generated quotation marks found file name\n(don’t use quotes around file name; mrgsolve take care )warning issued header file end .hWhen header file changed (MD5 checksum changes), model \nforced rebuilt (recompiled) mread mcode (\nmread_cache mcode_cache) called; feature available\nheader files listed $INCLUDE (see )use $INCLUDE include Rcpp, boost, RcppArmadillo \nRcppEigen headers; use appropriate $PLUGIN insteadFor applications don’t fit requirements listed , users can\nalways include header files model $GLOBAL like :careful : changes mystuff.h \npart model specification, model may fully compiled\ncalling mread. case, always use preclean=TRUE argument \nmread force model built calling mread.","code":"$INCLUDE\nmystuff.h\notherstuff.h$INCLUDE\nmystuff.h,  otherstuff.h$GLOBAL\n#include \"/Users/me/libs/mystuff.h\""},{"path":"model-specification.html","id":"block-env","chapter":"2 Model specification","heading":"2.2.26 $ENV  ","text":"Syntax: RMultiple allowed: noThis block R code (just code stand-alone R script.\ncode parsed evaluated new environment model \ncompiled. Objects inside $ENV can utilized different C++ functions\n(see 2.2.21) parts simulation process.example:","code":"$ENV\n\nSigma <- cmat(1,0.6,2)\n\nmu <- c(2,4)\n\ncama <- function(mod) {\n  mod %>%\n    ev(amt=100, ii=12, addl=10) %>% \n    mrgsim(obsonly=TRUE,end=120)\n}"},{"path":"model-specification.html","id":"variables-macros","chapter":"2 Model specification","heading":"2.3 Variables and Macros","text":"section describes macros internal variables can used \nmodel specification files. following section, adopt convention\nCMT stands compartment model.IMPORTANT NOTE:clear usage examples variables can set \nuser read checked. internal variables \npre-defined pre-initialized mrgsolve. user never try \ndeclare internal variable; always result compile-time\nerror.","code":""},{"path":"model-specification.html","id":"id","chapter":"2 Model specification","heading":"2.3.1 ID","text":"current subject identifier. ID alias self.id.","code":""},{"path":"model-specification.html","id":"time","chapter":"2 Model specification","heading":"2.3.2 TIME","text":"Gives time current data set record. usually used \n$MAIN $TABLE. TIME alias self.time. Contrast \nSOLVERTIME.","code":""},{"path":"model-specification.html","id":"solvertime","chapter":"2 Model specification","heading":"2.3.3 SOLVERTIME","text":"Gives time current timestep taken solver. can \nused $ODE. Contrast TIME.Starting mrgsolve version 1.0.0, variable T provided synonym\nSOLVERTIME inside $ODE invoke nm-vars plugin (Section\n9.2).","code":""},{"path":"model-specification.html","id":"t","chapter":"2 Model specification","heading":"2.3.4 T","text":"provided nm-vars plugin invoked; see SOLVERTIME.","code":""},{"path":"model-specification.html","id":"evid","chapter":"2 Model specification","heading":"2.3.5 EVID","text":"EVID event id indicator. mrgsolve recognized following event IDs:0 = observation record1 = bolus infusion dose2 = type event, solver reset3 = system reset4 = system reset dose8 = replaceEVID alias self.evid.","code":""},{"path":"model-specification.html","id":"cmt","chapter":"2 Model specification","heading":"2.3.6 CMT","text":"CMT current compartment number. case, CMT used literally\n(stand-name compartment). example:example, GUT, CENT PERIPH amounts respective\ncompartments CMT refers value CMT data record /\ndata set.CMT alias self.cmt.","code":"$CMT GUT CENT PERIPH\n\n$MAIN\n\nif(CMT==2) {\n  // ....\n}"},{"path":"model-specification.html","id":"amt","chapter":"2 Model specification","heading":"2.3.7 AMT","text":"AMT current value dose amount.AMT alias self.amt.","code":""},{"path":"model-specification.html","id":"newind","chapter":"2 Model specification","heading":"2.3.8 NEWIND","text":"NEWIND new individual indicator, taking following values:0 first event record data set1 first event record subsequent individual2 subsequent event record individualFor example:NEWIND alias self.newind.","code":"[ GLOBAL ]\nint counter = 0;\n\n[ MAIN ]\nif(NEWIND <=1) {\n  counter  = 0;\n}"},{"path":"model-specification.html","id":"ss_advance","chapter":"2 Model specification","heading":"2.3.9 SS_ADVANCE","text":"bool data item (either true false) always false\nunless mrgsolve currently advancing system steady state\n(Chapter 8); true. variable \navailable $ODE ($DES) block.Use variable modify calculation model differential equations\nsystem advancing steady state. One use case \naccumulation compartment calculate AUC want halt accumulation\nsystem working toward steady state","code":"$ODE\ndxdt_CENT = -(CL/V) * CENT;\ndxdt_AUC = CENT/V;\nif(SS_ADVANCE) dxdt_AUC = 0;"},{"path":"model-specification.html","id":"simeta","chapter":"2 Model specification","heading":"2.3.10 simeta()","text":"simeta() function can used re-simulate ETA values. example,re-simulate ETA(n).","code":"$MAIN\nsimeta();"},{"path":"model-specification.html","id":"simeps","chapter":"2 Model specification","heading":"2.3.11 simeps()","text":"simeps() works like simeta(), EPS(n) values re-simulated rather\nETA values.","code":""},{"path":"model-specification.html","id":"self-object","chapter":"2 Model specification","heading":"2.3.12 self  ","text":"self object gets passed model function contains\ndata items functions can called. struct (see\nsource code\n.\npartial list members documented following sections.self functions includeself.tad()self.mtime()self.mevent()self.stop()self.stop_id()self.stop_id_cf()self data members includeself.id (ID)self.amt (AMT)self.cmt (CMT)self.evid (EVID)self.newind (NEWIND)self.nidself.idnself.rownself.nrowself.envir (see note )information provided transparency exhaustive.\nprovide interface data items pre-processor directives\nsimpler names (e.g. EVID translate self.evid) users \nencouraged use simpler, API name.","code":""},{"path":"model-specification.html","id":"self.cmt","chapter":"2 Model specification","heading":"2.3.13 self.cmt","text":"current compartment number regardless whether given cmt \nCMT data set. alias self.cmt.example:","code":"$TABLE\n\ndouble DV = CENT/VC + EPS(1);\n\nif(self.cmt==3) DV = RESPOSE + EPS(2);"},{"path":"model-specification.html","id":"self.amt","chapter":"2 Model specification","heading":"2.3.14 self.amt","text":"current amt value regardless whether given amt AMT\ndata set. alias self.amt.","code":"[ PREAMBLE ]\ndouble last_dose = 0;\n\n[ MAIN ]\n\nif(EVID==1) {\n  last_dose = self.amt;  \n}"},{"path":"model-specification.html","id":"self.nid","chapter":"2 Model specification","heading":"2.3.15 self.nid","text":"number IDs data set.","code":""},{"path":"model-specification.html","id":"self.idn","chapter":"2 Model specification","heading":"2.3.16 self.idn","text":"current ID number. Numbers start 0 increase one self.nid-1.\nwant test last ID output data set, write:","code":"[ table ]\n\nif(self.idn == (self.nid-1)) {\n  // do something ....\n}"},{"path":"model-specification.html","id":"self.nrow","chapter":"2 Model specification","heading":"2.3.17 self.nrow","text":"total number rows output data set.","code":""},{"path":"model-specification.html","id":"self.rown","chapter":"2 Model specification","heading":"2.3.18 self.rown","text":"current row number. Numbers start 0 increase one self.rown-1.\nwant test last row output data set, write:","code":"[ table ]\n\nif(self.rown == (self.nrow-1)) {\n  // do something ....\n}"},{"path":"model-specification.html","id":"self.envir","chapter":"2 Model specification","heading":"2.3.19 self.envir","text":"item null pointer can cast Rcpp::Environment \nRcpp plugin invoked (see Section 9.5).example","code":"[ plugin ] Rcpp mrgx\n  \n[ preamble ] \nRcpp::Environment env = mrgx::get_envir(self);"},{"path":"model-specification.html","id":"self-tad","chapter":"2 Model specification","heading":"2.3.20 self.tad()  ","text":"function calculates returns time recent\ndose event record (record EVID equal 1 4). self.tad() \nreturn -1 called first dose record within individual\n(NEWIND <= 1).function called $MAIN every time $MAIN called.example:make calculation depend test condition; must called\nevery time $MAIN called order see every dose.","code":"$MAIN\n\ndouble TAD = self.tad();"},{"path":"model-specification.html","id":"self.mtime","chapter":"2 Model specification","heading":"2.3.21 self.mtime(<time>)  ","text":"function creates modeled even time. argument \nnumeric time future current individual indicates \ndiscontinuity included simulation.self.mtime() called, new record added current\nindividual’s record set EVID set 2. means system\nadvances record (time), differential equation solver \nreset restart, creating discontinuity. function returns time \nevent user can work subsequent code.example,","code":"$PARAM change_point = 5.13;\n\n$MAIN\n\ndouble KA = 1.1;\n\ndouble mt1 = self.mtime(change_point);\n\nif(TIME >= mt1) KA = 2.1;  "},{"path":"model-specification.html","id":"self.meventtime-evid","chapter":"2 Model specification","heading":"2.3.22 self.mevent(<time>, <evid>)","text":"Related self.mtime() (Section @ref(self.mtime)), except can set \nspecific EVID intervention track change time via EVID\nrather time. ’d use want anchor\nseveral events future sure can distinguish .\nexampleNow, can look EVID==33 know hit change_point1 \nEVID==34 indicate hit change_point2. Notice \nself.mevent() doesn’t return value. know ’ve hit \nchange time checking EVID.","code":"[ main ] \nself.mevent(change_point1, 33);\nself.mevent(change_point2, 34);"},{"path":"model-specification.html","id":"self.stop","chapter":"2 Model specification","heading":"2.3.23 self.stop()","text":"self function available called $PREAMBLE, $MAIN,\n$TABLE. function called, entire problem stopped upon\nprocessing next simulation record.might called something really bad happened just want \nstop simulation error.","code":""},{"path":"model-specification.html","id":"self.stop_id","chapter":"2 Model specification","heading":"2.3.24 self.stop_id()","text":"self function available called $PREAMBLE, $MAIN,\n$TABLE. function called, processing current individual\nstopped missing values (NA_real) filled remaining compartment’\ncapture outputs.might called condition reached current individual\nindicates either rest outputs inconsequential \nproblem particular individual.See also self.stop_id() self.stop().","code":""},{"path":"model-specification.html","id":"self.stop_id_cf","chapter":"2 Model specification","heading":"2.3.25 self.stop_id_cf()","text":"self function available called $PREAMBLE, $MAIN,\n$TABLE. function called, processing current individual\nstopped current values carried forward (cf) remaining\noutput records individual.might called condition reached current individual\nindicates either rest outputs inconsequential \nproblem particular individual.See also self.stop_id_cf() self.stop().","code":""},{"path":"model-specification.html","id":"thetan","chapter":"2 Model specification","heading":"2.3.26 THETA(n)","text":"THETA(n) ubiquitous NONMEM control streams, representing estimated\nfixed effect parameters. mrgsolve attach special meaning \nTHETA(n) starting version 1.0.0 translate THETA(n) \nTHETAn. useful importing NONMEM estimates using $NMXML\n$NMEXT, THETAs imported parameters names\nTHETA1, THETA2, THETA3 (see Sections 2.2.23 \n2.2.24). THETA(n) simply NONMEM-oriented style referring\nTHETAn.","code":""},{"path":"model-specification.html","id":"etan","chapter":"2 Model specification","heading":"2.3.27 ETA(n)","text":"ETA(n) value subject-level variate drawn model\nOMEGA matrix. ETA(1) ETA(25) default values zero \nmay used model even appropriate OMEGA matrices \nprovided.example:, 3x3 OMEGA matrix. ETA(1), ETA(2), ETA(3) \npopulated variates drawn matrix. ETA(4) ETA(25)\npopulated zero.","code":"$OMEGA\n1 2 3\n\n$MAIN\ndouble CL = TVCL*exp(ETA(1));\ndouble VC = TVVC*exp(ETA(2));\ndouble KA = TVKA*exp(ETA(3));"},{"path":"model-specification.html","id":"epsn","chapter":"2 Model specification","heading":"2.3.28 EPS(n)","text":"EPS(n) holds current value observation-level random variates drawn\nSIGMA. basic setup detailed ETA(n).Example:","code":"[ CMT ] CENT\n\n[ PARAM ] CL=1, VC=20\n\n[ SIGMA ] \n25 0.0025\n\n[ TABLE ]\ndouble DV = (CENT/VC)*(1+EPS(2)) + EPS(1);"},{"path":"model-specification.html","id":"tablename","chapter":"2 Model specification","heading":"2.3.29 table(<name>)","text":"macro deprecated. Users use code like :rather :See: section 2.2.11 also 2.2.15","code":"[ TABLE ]\ntable(CP) = CENT/VC;$TABLE \ndouble CP = CENT/VC;\n\n$CAPTURE CP"},{"path":"model-specification.html","id":"spec-f","chapter":"2 Model specification","heading":"2.3.30 F_CMT  ","text":"CMT compartment, sets bioavailability fraction compartment.Example:","code":"$MAIN\nF_CENT = 0.7;"},{"path":"model-specification.html","id":"spec-alag","chapter":"2 Model specification","heading":"2.3.31 ALAG_CMT  ","text":"CMT compartment, sets lag time doses compartment.Example:","code":"$MAIN\nALAG_GUT = 0.25;"},{"path":"model-specification.html","id":"spec-r","chapter":"2 Model specification","heading":"2.3.32 R_CMT  ","text":"CMT compartment, sets infusion rate compartment. \ninfusion rate set via R_CMT rate data set event\nobject set -1.Example:","code":"$MAIN\nR_CENT = 100;"},{"path":"model-specification.html","id":"rn","chapter":"2 Model specification","heading":"2.3.33 Rn","text":"available nm-vars plugin invoked; see R_CMT.","code":""},{"path":"model-specification.html","id":"spec-d","chapter":"2 Model specification","heading":"2.3.34 D_CMT  ","text":"CMT compartment, sets infusion duration compartment.\ninfusion duration set via D_CMT rate data set \nevent object set -2.Example:","code":"$MAIN\nD_CENT = 2;"},{"path":"model-specification.html","id":"nonmem-like-syntax","chapter":"2 Model specification","heading":"2.3.35 NONMEM-like syntax","text":"NONMEM-like syntax lets write F1 rather F_GUT,\nD2 rather D_CENT well variables commonly used\nNONMEM control stream. make syntax available, nm-vars\nplugin must invoked.See Section 9.2 nm-vars plugin details.","code":""},{"path":"model-specification.html","id":"reserved-words","chapter":"2 Model specification","heading":"2.4 Reserved words","text":"Reserved words used names parameters, compartments \nderived variables model. Note words “reserved”\nuse data set.reserved words depend compartment names model. \nexample, compartment called CENT model, \nfollowing reserved","code":"ID\namt\ncmt\nii\nss\nevid\naddl\nrate\ntime\nSOLVERTIME\ntable\nETA\nEPS\nAMT\nCMT\nID\nTIME\nEVID\nsimeps\nself\nsimeta\nNEWIND\nDONE\nCFONSTOP\nDXDTZERO\nCFONSTOP\nINITSOLV\n_F\n_R\n_ALAG\nSETINIT\nreport\n_VARS_\nVARS\nSS_ADVANCE\nAMT\nCMT\nII\nSS\nADDL\nRATE\nTHETA\npred_CL\npred_VC\npred_V\npred_V2\npred_KA\npred_Q\npred_VP\npred_V3\ndouble\nint\nbool\ncapture\nF_CENT\nR_CENT\nD_CENT \nALAG_CENT\nN_CENT"},{"path":"model-specification.html","id":"new-variables","chapter":"2 Model specification","heading":"2.5 Derive new variables","text":"New C++ variables may derived $GLOBAL, $PREAMBLE $MAIN, $ODE \n$TABLE. C++ variables, type variable used\nmust declared. vast majority applications, double type \nused (double-precision numeric value).want CLi numeric value, use double. initialize boolean\nvariable (true / false), write","code":"$MAIN\n\ndouble CLi = TVCL*exp(ETA(1));$MAIN\nbool cure = false;"},{"path":"model-specification.html","id":"special-handling-for-double-int-bool","chapter":"2 Model specification","heading":"2.5.1 Special handling for double, int, bool","text":"variables type double, int, bool declared \ninitialized $PREAMBLE, $MAIN, $ODE, $TABLE, mrgsolve detect\ndeclarations, modify code variables actually\ndeclared $GLOBAL $MAIN, $ODE, $TABLE. done \nvariables declared one code block (e.g. $MAIN) can read \nmodified another code block (e.g. $TABLE).example, following code:double-precision numeric variable created (CLi) $MAIN block.\nmrgsolve parses model file, code gets translated toThat , CLi declared $GLOBAL unnamed namespace variables\nlike global variables within model file .way, can still read CLi variable $TABLE:declare variable local particular code block:localdouble type still just double-precision variable. difference\nprotected re-declaration process variable\nlocal (case) $MAIN block.","code":"$MAIN\ndouble CLi = TVCL*exp(ETA(1));$GLOBAL\nnamespace {\n  double CLi;\n}\n\n$MAIN\nCLi = TVCL*exp(ETA(1));$MAIN\ndouble CLi = TVCL*exp(ETA(1));\ndouble VCi = TVVC*exp(ETA(2));\n\n$TABLE\ndouble KEi = CLi/VCi;\n\n$CAPTURE KEi$MAIN\n\nlocaldouble CLi = TVCL*exp(ETA(1));"},{"path":"model-specification.html","id":"using-other-types-globally","chapter":"2 Model specification","heading":"2.5.2 Using other types globally","text":"noted previous section, double, int, bool processed\nspecial way default global file. Many times\nwant work variable types global manner. Whenever \nwant data structure accessible across functions (e.g. $MAIN, $TABLE,\netc.) declared $GLOBAL, optionally unnamed namespace.example:orIn case object needs configuration prior starting problem,\nuse $PREAMBLE work","code":"[ GLOBAL ]\nstd::vector<double> myvec;[ GLOBAL ]\nnamespace {\n  std::vector<double> myvec;\n}[ GLOBAL ]\nstd::vector<double> myvec;\n\n[ PREAMBLE ] \nmyvec.assign(3,1);"},{"path":"model-specification.html","id":"random-number-generation","chapter":"2 Model specification","heading":"2.6 Random number generation","text":"Users can simulate random numbers inside model file using functions \nsimilar functions ’d normally use R (e.g. rnorm() \nrunif()). functionality provided Rcpp therefore requires\nusing Rcpp plugin (see Chapter 9 Section\n9.5).Rcpp provides functions inside R namespace \nprefix function call R::.example, make draw Uniform (0,1)Note 0 gets used min 1 gets used max;\ndidn’t pass n draw single number (vector like ’d\nget (runif(100, 0, 1) R console). general, functions\nwork like R counterparts, without n argument.Another example showing draw binomial distribution probability\n0.5Here, 1 used size (n) 0.5 used prob.helpful functions R::rnorm() R::rlnorm() can\ncall r functions well corresponding dpq functions\nR namespace.Documentation, including functions call arguments can found \nRcpp API docshttp://dirk.eddelbuettel.com/code/rcpp/html/namespaceR.html","code":"[ plugin ] Rcpp\n  \n[ error ] \ndouble draw = R::runif(0,1);[ plugin ] Rcpp\n  \n[ error ] \ndouble draw = R::rbinom(1, 0.5);"},{"path":"model-specification.html","id":"examples","chapter":"2 Model specification","heading":"2.7 Examples","text":"following sections show example model specification. intention \nshow different blocks, macros variables can work together make\nfunctional model. models given purely illustrative purpose \nmay particularly useful application.","code":""},{"path":"model-specification.html","id":"simple-pk-model","chapter":"2 Model specification","heading":"2.7.1 Simple PK model","text":"Notes:Basic PK parameters declared $PARAM; every parameter needs \nassigned valueTwo compartments GUT CENT declared $CMT; using $CMT\nassumes compartments start 0 massBecause declared GUT CENT compartments, write dxdt_\nequations $ODEIn $ODE, refer parameters (CL/VC/KA) amounts \ncompartment particular time (GUT CENT)$ODE C++ code; line ends ;derive variable called CP $TABLE type capture; mrgsolve\nenter CP name $CAPTURE block listThis model can also written without differential equations","code":"$PARAM CL = 1, VC = 30, KA = 1.3\n\n$CMT GUT CENT\n\n$ODE\n\ndxdt_GUT = -KA*GUT;\ndxdt_CENT = KA*GUT - (CL/VC)*CENT;\n\n$TABLE\ncapture CP = CENT/VC;[ PARAM ] CL = 1, VC = 30, KA = 1.3\n\n[ PKMODEL ] cmt = \"CMT GUT CENT\", depot = TRUE\n\n$TABLE\ncapture CP = CENT/VC;"},{"path":"model-specification.html","id":"pkpd-model","chapter":"2 Model specification","heading":"2.7.2 PK/PD model","text":"Notes:use preprocessor #define directive $GLOBAL; everywhere \nmodel CP token found, expression (CENT/VC) … \nparentheses … insertedWe write initial value RESP compartment $MAIN \nfunction two parameters KIN/KOUTA new variable - INH- declared used $ODESince CP defined CENT/VC, can “capture” name/value \n$CAPTUREBoth $MAIN $ODE C++ code blocks; don’t forget add ;\nend statement","code":"$PARAM CL = 1, VC = 30, KA = 1.3\nKIN = 100, KOUT = 2, IC50 = 2\n\n$GLOBAL\n#define CP (CENT/VC)\n\n$CMT GUT CENT RESP\n\n$MAIN\nRESP_0 = KIN/KOUT;\n\n$ODE\n\ndouble INH = CP/(IC50+CP);\n\ndxdt_GUT = -KA*GUT;\ndxdt_CENT = KA*GUT - (CL/VC)*CENT;\ndxdt_RESP = KIN*(1-INH) - KOUT*RESP;\n\n$CAPTURE CP"},{"path":"model-specification.html","id":"population-pk-model-with-covariates-and-iov","chapter":"2 Model specification","heading":"2.7.3 Population PK model with covariates and IOV","text":"Notes:Use $SET set simulation time grid 0 240 0.1There two $OMEGA matrices; name IIV IOVThe IIV “etas” labeled ECL/EVC/EKA; aliases \nETA(1)/ETA(2)/ETA(3). IOV matrix unlabeled; must refer \nETA(4)/ETA(5) thisBecause ETA(1) ETA(2) labeled, can “capture” ECL \nEVCWe added zeros $OMEGA matrices; etas zero \npopulate matrices (section ??)","code":"$PARAM TVCL = 1.3, TVVC=28, TVKA=0.6, WT=70, OCC=1\n\n$SET delta=0.1, end=240\n\n$CMT GUT CENT\n\n$MAIN\n\ndouble IOV = IOV1\nif(OCC==2) IOV = IOV2;\n\ndouble CLi = exp(log(TVCL) + 0.75*log(WT/70) + ECL + IOV);\ndouble VCi = exp(log(TVVC) + EVC);\ndouble KAi = exp(log(TVKA) + EKA);\n\n$OMEGA @name IIV @labels ECL EVC EKA\n0 0 0\n$OMEGA @name IOV @labels IOV1 IOV2\n0 0\n\n$SIGMA 0\n\n$ODE\ndxdt_GUT = -KAi*GUT;\ndxdt_CENT = KAi*GUT - (CLi/VCi)*CENT;\n\n$TABLE\ncapture CP = CENT/VCi;\n\n$CAPTURE IOV ECL EVC"},{"path":"data-set-chapter.html","id":"data-set-chapter","chapter":"3 Input data sets","heading":"3 Input data sets","text":"Input data sets used mrgsolve allow user specify\ninterventions input data items.Please see mrgsolve help topic ?exdatasets examples \ndata sets discussed chapter. example data sets embedded \nmrgsolve package may used time.","code":""},{"path":"data-set-chapter.html","id":"datasets","chapter":"3 Input data sets","heading":"3.1 Overview","text":"Data sets primary mechanism establishing scope \nsimulations mrsolve, including individuals, interventions, observation\ntimes, parameter values. data_set idata_set (see ),\nmay include columns data sets names \nparameters model (section 1.1, 2.2.4).\nmrgsolve can recognize columns update parameter list \nsimulation proceeds. process key importance planning \nexecuting complex simulations discussed section\n11.3.","code":""},{"path":"data-set-chapter.html","id":"data-set","chapter":"3 Input data sets","heading":"3.2 Event data sets (data)","text":"Event data sets entered data.frame, one event per row. Events may\nobservations, doses, type events. mrgsolve documentation, \nrefer data sets data data_set (function \nused associate data set model object prior simulation).Event data sets several special column names mrgsolve always\naware :ID subject id. id need unique data_set:\nmrgsolve detects new individual current value ID different\nimmediate preceding value ID. However, always recommend using\nunique ID.ID subject id. id need unique data_set:\nmrgsolve detects new individual current value ID different\nimmediate preceding value ID. However, always recommend using\nunique ID.time TIME: states time data recordtime TIME: states time data recordevid EVID: event id indicator. evid can take values:\n0 = observation record\n1 = dosing event (bolus infusion)\n2 = type event, solver stop restart\n3 = system reset\n4 = reset dose\n8 = replace amount compartment amt\nevid EVID: event id indicator. evid can take values:0 = observation record1 = dosing event (bolus infusion)2 = type event, solver stop restart3 = system reset4 = reset dose8 = replace amount compartment amtamt AMT: dose amount (evid==1)amt AMT: dose amount (evid==1)cmt CMT: dosing compartment number. may also character\nvalue naming compartment name. compartment number must consistent\nnumber compartments model dosing records (evid==1).\nobservation records, cmt value 0 acceptable. Use negative\ncompartment number evid 2 turn compartment .cmt CMT: dosing compartment number. may also character\nvalue naming compartment name. compartment number must consistent\nnumber compartments model dosing records (evid==1).\nobservation records, cmt value 0 acceptable. Use negative\ncompartment number evid 2 turn compartment .rate RATE: non-zero evid=1 evid=4, implements \nzero-order infusion duration F_CMT*amt/rate, F_CMT \nbioavailability fraction dosing compartment. Use rate = -1 model\ninfusion rate rate = -2 model infusion duration, \n$MAIN (see sections 2.2.7, 2.3.30,2.3.32,\n2.3.34).rate RATE: non-zero evid=1 evid=4, implements \nzero-order infusion duration F_CMT*amt/rate, F_CMT \nbioavailability fraction dosing compartment. Use rate = -1 model\ninfusion rate rate = -2 model infusion duration, \n$MAIN (see sections 2.2.7, 2.3.30,2.3.32,\n2.3.34).ii II: inter-dose interval; ii=24 means daily dosing model\ntime unit hoursii II: inter-dose interval; ii=24 means daily dosing model\ntime unit hoursaddl ADDL: additional doses; non-zero value addl requires\nnon-zero ii recordaddl ADDL: additional doses; non-zero value addl requires\nnon-zero ii recordss SS steady state indicator; use 1 implement steady-state dosing; 0\notherwise. mrgsolve also recognizes dosing records ss=2. allows\ncombination different steady state dosing regimens linear kinetics\n(e.g. 10 mg QAM 20 mg QPM daily steady state).ss SS steady state indicator; use 1 implement steady-state dosing; 0\notherwise. mrgsolve also recognizes dosing records ss=2. allows\ncombination different steady state dosing regimens linear kinetics\n(e.g. 10 mg QAM 20 mg QPM daily steady state).column names preceding list written either lower case form\n(e.g. amt) upper case form (e.g. AMT). Either may used, however\ndata set checked consistency usage. error \nissued case mixture lower upper case names found.addition special column names, mrgsolve recognize columns \ndata_set name items parameter list (see\n2.2.4 1.1). mrgsolve sees \nnames match , update values matching names based \nfinds moves data set (see section\n11.3).","code":""},{"path":"data-set-chapter.html","id":"two-types-of-data_set","chapter":"3 Input data sets","heading":"3.2.1 Two types of data_set","text":"mrgsolve distinguishes two types data sets: data sets \nleast one observation record (evid=0) data sets records\nevid=0.Full data sets mix observations dosing events (likely, \nrequired). mrgsolve finds one record evid=0, assumes \noutput observation times come data set. case \nsimulation output time grid discussed 1.3 ignored \nobservations found data set appear simulated output. Use\nfull data sets want highly customized sampling schedule \nworking clinical data set.Condensed data sets records evid=0. case,\nmrgsolve fill simulated output observations times specified\noutput time grid ( section 1.3 see section\n11.5). convenient use less\ndata assembly burden output data sets can easily created dense\nsampling scheme highly customized sampling schemes little work.\nUse condensed data set want uniform set sampling times \nsubjects data set.Example condensed data setSee ?exdatasets R help system loading mrgsolve.Example full data setSee ?exdatasets R help system loading mrgsolve.Augmenting observations clinical data set\nOccasionally, want simulate clinical data set (observation\nrecords actually observed population patients) also want \naugment observations regular sequence times (example, \nmake smooth profile plot). case, can set obsaug  = TRUE\ncalling mrgsim.example:obsaug requests data set augmented observations \nsimulation time grid. can optionally request indicator called .u.g \nappear output takes value 1 augmented observations 0 \nobservations data set.","code":"\ndata(extran1, package = \"mrgsolve\")\nextran1.   ID  amt cmt time addl ii rate evid\n. 1  1 1000   1    0    3 24    0    1\n. 2  2 1000   2    0    0  0   20    1\n. 3  3 1000   1    0    0  0    0    1\n. 4  3  500   1   24    0  0    0    1\n. 5  3  500   1   48    0  0    0    1\n. 6  3 1000   1   72    0  0    0    1\n. 7  4 2000   2    0    2 48  100    1\n. 8  5 1000   1    0    0  0    0    1\n. 9  5 5000   1   24    0  0   60    1\ndata(exTheoph, package = \"mrgsolve\")\n\nhead(exTheoph).   ID   WT Dose time  conc cmt  amt evid\n. 1  1 79.6 4.02 0.00  0.00   1 4.02    1\n. 2  1 79.6 4.02 0.25  2.84   0 0.00    0\n. 3  1 79.6 4.02 0.57  6.57   0 0.00    0\n. 4  1 79.6 4.02 1.12 10.50   0 0.00    0\n. 5  1 79.6 4.02 2.02  9.66   0 0.00    0\n. 6  1 79.6 4.02 3.82  8.58   0 0.00    0\nmod <- mrgsolve:::house()\n\nout <- \n  mod %>%\n    data_set(exTheoph, ID==1) %>%\n    carry.out(a.u.g) %>%\n    obsaug %>%\n    mrgsim(end=24, delta=1)\n\nout. Model:  housemodel \n. Dim:    36 x 8 \n. Time:   0 to 24.37 \n. ID:     1 \n.     ID time a.u.g    GUT  CENT  RESP      DV      CP\n. 1:   1 0.00     1 0.0000 0.000 50.00 0.00000 0.00000\n. 2:   1 0.00     0 4.0200 0.000 50.00 0.00000 0.00000\n. 3:   1 0.25     0 2.9781 1.035 49.95 0.04552 0.04552\n. 4:   1 0.57     0 2.0285 1.961 49.81 0.08624 0.08624\n. 5:   1 1.00     1 1.2108 2.729 49.61 0.12001 0.12001\n. 6:   1 1.12     0 1.0484 2.875 49.57 0.12643 0.12643\n. 7:   1 2.00     1 0.3647 3.422 49.34 0.15048 0.15048\n. 8:   1 2.02     0 0.3560 3.428 49.33 0.15072 0.15072\nout %>% select(time) %>% unlist %>% unname.  [1]  0.00  0.00  0.25  0.57  1.00  1.12  2.00  2.02  3.00  3.82  4.00  5.00\n. [13]  5.10  6.00  7.00  7.03  8.00  9.00  9.05 10.00 11.00 12.00 12.12 13.00\n. [25] 14.00 15.00 16.00 17.00 18.00 19.00 20.00 21.00 22.00 23.00 24.00 24.37"},{"path":"data-set-chapter.html","id":"sorting-requirements","chapter":"3 Input data sets","heading":"3.2.2 Sorting requirements","text":"IDs data set can appear order. However, error \ngenerated time record less time previous record\nwithin ID.","code":""},{"path":"data-set-chapter.html","id":"creating-data-sets","chapter":"3 Input data sets","heading":"3.2.3 Creating data sets","text":"expand.ev function provided mrgsolve help creating data sets\ncertain style. R code produces valid data set fine \nuse.","code":""},{"path":"data-set-chapter.html","id":"example","chapter":"3 Input data sets","heading":"3.2.4 Example","text":"create data set 3 people receiving 250 mg every 8 hours 12 total doses:Notice expand.ev assumes time 0 cmt 1. dose \n2-hour infusion second compartment use:Use data_set pass data problem.example:","code":"\ndata <- expand.ev(ID=1:3, amt=250, ii=8, addl=11)\n\ndata.   ID time amt ii addl cmt evid\n. 1  1    0 250  8   11   1    1\n. 2  2    0 250  8   11   1    1\n. 3  3    0 250  8   11   1    1\ndata <- expand.ev(ID=1:3, amt=250, rate=125, ii=8, addl=11, cmt=2)\n\ndata.   ID time amt rate ii addl cmt evid\n. 1  1    0 250  125  8   11   2    1\n. 2  2    0 250  125  8   11   2    1\n. 3  3    0 250  125  8   11   2    1\nmod <- mrgsolve:::house()\n\nmod %>%\n  data_set(data) %>%\n  mrgsim(end=240) %>%\n  plot(CP~time|factor(ID))"},{"path":"data-set-chapter.html","id":"idata-set","chapter":"3 Input data sets","heading":"3.3 Individual data sets (idata)","text":"Individual data sets carry individual-level data. individual data used\nseveral different ways:Individual-level parameters: Just prior simulating individual,\nmrgsolve checks appropriate row idata (supplied) columns\nparameter names. parameter names found, parameter list \nupdated update remains effect duration individual’s\ndata records.Individual- group-level designs: individual group individual\nmay assigned different sampling design. example, individuals arm 1\nmay need simulated 4 weeks whereas individuals arm 2 may need \nsimulated 8 weeks. idata may used identify one several sampling\ndesigns individual group individuals.Individual-level compartment initialization: model compartment\ncalled CMT mrgsolve finds column idata called CMT_0, value\nCMT_0 used initialize compartment , potentially \ndifferent value individual. Note several ways \ninitialize compartments detailed 11.2.idata_set entered data.frame one unique ID per row. \nmrgsolve documentation, refer individual data sets idata \nidata_set distinguish event data sets (see section\n3.2).idata_set looks like :idata_set 10 subjects, one subject per row. ID\ncolumn connects data row data data_set, also\nrequires ID column.ID column required column name idata_set ID \nalways unique identifier row.","code":"\ndata(exidata)\n\nexidata.    ID    CL    VC     KA  KOUT  IC50 FOO\n. 1   1 1.050 47.80 0.8390 2.450 1.280   4\n. 2   2 0.730 30.10 0.0684 2.510 1.840   6\n. 3   3 2.820 23.80 0.1180 3.880 2.480   5\n. 4   4 0.552 26.30 0.4950 1.180 0.977   2\n. 5   5 0.483  4.36 0.1220 2.350 0.483  10\n. 6   6 3.620 39.80 0.1260 1.890 4.240   1\n. 7   7 0.395 12.10 0.0317 1.250 0.802   8\n. 8   8 1.440 31.20 0.0931 4.030 1.310   7\n. 9   9 2.570 18.20 0.0570 0.862 1.950   3\n. 10 10 2.000  6.51 0.1540 3.220 0.699   9"},{"path":"data-set-chapter.html","id":"use-case","chapter":"3 Input data sets","heading":"3.3.1 Use case","text":"idata_set usually helpful implementing batch simulations \ndata_set used. batch may sensitivity analysis \npopulation simulation. Usually, events object used idata, \nrequired.Use idata_set function pass data set problem.example:10 subjects idata_set, get 10 profiles \noutput. “individual” “unit” received 100 mg dose. \nuse data_set assign different doses different individuals.","code":"\nmod <- mrgsolve:::house()\n\nmod %>%\n  idata_set(exidata) %>%\n  ev(amt=100) %>%\n  mrgsim %>% plot"},{"path":"data-set-chapter.html","id":"numeric-only","chapter":"3 Input data sets","heading":"3.4 Numeric data only","text":"data.frame holding data_set idata_set may type data\ncolumns. However, numeric data can actually get passed \nsimulation engine. mrgsolve automatically look non-numeric columns\ndrop data_set idata_set warning.","code":""},{"path":"data-set-chapter.html","id":"valid_data_set","chapter":"3 Input data sets","heading":"3.5 Data set validation","text":"time simulation, mrgsolve validate input data set, removing\nnon-numeric columns, checking missing values parameter columns, checking\ncompartment numbers, etc.Users can pre-validate data set need happen \nrun time.can improve efficiency performing large number replicate\nsimulations data set, unlikely provide meaningful\nspeed-single simulation small number simulations.","code":"\ndata(exTheoph)\n\nhead(exTheoph).   ID   WT Dose time  conc cmt  amt evid\n. 1  1 79.6 4.02 0.00  0.00   1 4.02    1\n. 2  1 79.6 4.02 0.25  2.84   0 0.00    0\n. 3  1 79.6 4.02 0.57  6.57   0 0.00    0\n. 4  1 79.6 4.02 1.12 10.50   0 0.00    0\n. 5  1 79.6 4.02 2.02  9.66   0 0.00    0\n. 6  1 79.6 4.02 3.82  8.58   0 0.00    0\nmod <- modlib(\"pk1\"). Loading model from cache.\nvalid <- valid_data_set(exTheoph,mod)\n\nstr(valid).  'valid_data_set' num [1:132, 1:9] 1 1 1 1 1 1 1 1 1 1 ...\n.  - attr(*, \"dimnames\")=List of 2\n.   ..$ : NULL\n.   ..$ : chr [1:9] \"ID\" \"WT\" \"Dose\" \"time\" ..."},{"path":"data-set-chapter.html","id":"pred-data","chapter":"3 Input data sets","heading":"3.6 Data sets for use with $PRED","text":"compartments involved, relaxed data set\nrequirements models utilize $PRED.time TIME required input; supplied, \ntime column included output value 0When time TIME supplied, may negative; records must still\nsorted time TIMEIf supplied, cmt CMT must zeroAn error generated rate RATE suppliedAn error generated ss SS supplied","code":""},{"path":"event-chapter.html","id":"event-chapter","chapter":"4 Event objects","heading":"4 Event objects","text":"Event objects similar data sets described 3,\nsimpler easier create. fastest way implement \nbasic intervention (like dosing) single “individual” model.Event objects also offer elegant way compose complicated dosing regimens.\nTypically, different parts regimen composed individual event\nobjects combined create multi-faceted dose regiment.Finally, event object created (either simple complex), \nobject can “expanded” multiple individuals create population\ndata set simulation.See details subsequent sections.","code":""},{"path":"event-chapter.html","id":"usage","chapter":"4 Event objects","heading":"4.1 Usage","text":"Event objects frequently used pipeline simulate dosing regimen.\nexampleThis used ev() constructor make event object two 100 mg doses\npassed mrgsim() implement regimen.Alternatively, can create standalone object feed pipelineIf using pipe syntax, following equivalent\ncallsAnd mrgsim() variants explicitly accept event objectMore said create manipulate event objects \nfollowing sections.","code":"\nmod <- house(end = 72) \n\nmod %>% ev(amt = 100, ii = 24, addl = 1) %>% mrgsim() %>% plot(\"CP\")\nregimen <- ev(amt = 100, ii = 24, addl = 1)\n\nmod %>% ev(regimen) %>% mrgsim() %>% plot(\"CP\")\nmrgsim(mod, events = regimen) %>% plot(\"CP\")\nmrgsim_e(mod, regimen) %>% plot(\"CP\")"},{"path":"event-chapter.html","id":"construction","chapter":"4 Event objects","heading":"4.2 Construction","text":"new event object can created ev() constructor. single,\n100 mg dose beWhen print object R console see 100 mg dose along \nfollowing defaultstime set 0cmt set 1 (first compartment)evid set 1 (bolus dose)course, can override defaults add additional items \nneeded. single 100 mg dose infused 2 hours compartment 2 one\nhour simulation startsTo use event object, can pass mrgsim() events\nargumentEvent object inputs can functions previously defined inputs. exampleSee ?ev() help topic information additional arguments\nconstructing event objects. , ’d like specifically highlight \nhandful options can helpful constructing event objects.Infusion durationAbove, created infusion event objects adding infusion rate \ninput. can also indicate infusion adding infusion time \ntinf argumentIDWhile primary use case event objects single individuals,\ncan code series IDs object tooHere, asked 3 IDs object. turned simulation\ndata set (see ), ’ll population data set simulate.Additional data itemsWe can also pass arbitrary data columns event object. \nexample, can pass WT","code":"\ne <- ev(amt = 100)\ne. Events:\n.   time amt cmt evid\n. 1    0 100   1    1\ne <- ev(amt = 100, rate = 50, cmt = 2, time = 1)\nmod <- house(delta = 1, end = 24)\n\nmrgsim(mod, events = e). Model:  housemodel \n. Dim:    26 x 7 \n. Time:   0 to 24 \n. ID:     1 \n.     ID time GUT  CENT  RESP    DV    CP\n. 1:   1    0   0  0.00 50.00 0.000 0.000\n. 2:   1    1   0  0.00 50.00 0.000 0.000\n. 3:   1    1   0  0.00 50.00 0.000 0.000\n. 4:   1    2   0 48.77 44.12 2.439 2.439\n. 5:   1    3   0 95.16 36.98 4.758 4.758\n. 6:   1    4   0 90.52 34.61 4.526 4.526\n. 7:   1    5   0 86.11 34.75 4.305 4.305\n. 8:   1    6   0 81.91 35.22 4.095 4.095\nev(amt = 100, rate = amt / 2). Events:\n.   time amt rate cmt evid\n. 1    0 100   50   1    1\nev(amt = 100, tinf = 2). Events:\n.   time amt rate cmt evid tinf\n. 1    0 100   50   1    1    2\nev(amt = 100, ID = 1:3). Events:\n.   ID time amt cmt evid\n. 1  1    0 100   1    1\n. 2  2    0 100   1    1\n. 3  3    0 100   1    1\nev(amt = 100, WT = 80). Events:\n.   time amt cmt evid WT\n. 1    0 100   1    1 80"},{"path":"event-chapter.html","id":"coerce-to-data-set","chapter":"4 Event objects","heading":"4.3 Coerce to data set","text":"noted, event objects similar data sets nothing\ndata sets hood. can take event objects created \ncoerce objects.Using as_data_setThis ensure ID column output \nsuitable use simulation.Using .data.frameUpper case namesSee section @(ref-evd) constructor event object renders \nupper case names.","code":"\nas_data_set(e).   time amt rate cmt evid ID\n. 1    1 100   50   2    1  1\nas.data.frame(e) %>% mutate(ID = 5).   time amt rate cmt evid ID\n. 1    1 100   50   2    1  5"},{"path":"event-chapter.html","id":"extract-information","chapter":"4 Event objects","heading":"4.4 Extract information","text":"$ operator event objects","code":"\ne$amt. [1] 100"},{"path":"event-chapter.html","id":"combining-event-objects","chapter":"4 Event objects","heading":"4.5 Combining event objects","text":"","code":""},{"path":"event-chapter.html","id":"concatenate","chapter":"4 Event objects","heading":"4.5.1 Concatenate","text":"Two event objects can concatenated using c operatorThis essentially “rbinds” rows individual event objects \nsorts rows time.NOTE: result manipulation another event object.","code":"\ne1 <- ev(amt = 100)\ne2 <- ev(amt = 200, time = 24)\n\nc(e1, e2). Events:\n.   time amt cmt evid\n. 1    0 100   1    1\n. 2   24 200   1    1"},{"path":"event-chapter.html","id":"sequence","chapter":"4 Event objects","heading":"4.5.2 Sequence","text":"Event objects can also combined happen sequence. previous\nexample, wanted 200 mg happen 24 hours code \nfact time accordingly.specifying dosing interval (ii) can ask mrgsolve \nautomatically calling seq() method.trivial example get simple result. can try something \ncomplicated make pointNOTE: mrgsolve puts event objects sequence, starts \nnext segment regimen one dosing interval previous regimen\nfinished. Going back simple examplee1 just single dose time 0. mrgsolve e2 start one dosing\ninterval (24 hours) last () dose e1. can alter amount\ntime segments regimen using wait argument. \nexample, push e2 additional 24 hours ’d useWe can also use negative value wait make next dose happen soonerFinally, note event objects can used multiple times \nsequence","code":"\ne1 <- ev(amt = 100, ii = 24)\ne2 <- ev(amt = 200, ii = 24)\n\nseq(e1, e2). Events:\n.   time amt ii addl cmt evid\n. 1    0 100 24    0   1    1\n. 2   24 200 24    0   1    1\ne3 <- ev(amt = 100, ii = 6,  addl = 28)\ne4 <- ev(amt = 200, ii = 12, addl = 124)\ne5 <- ev(amt = 400, ii = 24, addl = 3)\n\nseq(e3, e4, e5). Events:\n.   time amt ii addl cmt evid\n. 1    0 100  6   28   1    1\n. 2  174 200 12  124   1    1\n. 3 1674 400 24    3   1    1\nseq(e1, e2). Events:\n.   time amt ii addl cmt evid\n. 1    0 100 24    0   1    1\n. 2   24 200 24    0   1    1\nseq(e1, wait = 24, e2). Events:\n.   time amt ii addl cmt evid\n. 1    0 100 24    0   1    1\n. 2   48 200 24    0   1    1\nseq(e1, wait = -12, e2). Events:\n.   time amt ii addl cmt evid\n. 1    0 100 24    0   1    1\n. 2   12 200 24    0   1    1\nseq(e1, e2, wait = 7*24, e2, e1). Events:\n.   time amt ii addl cmt evid\n. 1    0 100 24    0   1    1\n. 2   24 200 24    0   1    1\n. 3  216 200 24    0   1    1\n. 4  240 100 24    0   1    1"},{"path":"event-chapter.html","id":"repeat","chapter":"4 Event objects","heading":"4.5.3 repeat","text":"Like seq() method event objects, ev_repeat put event object\nsequence n timesBy default, function returns regular data frame. return event\nobject instead callYou can put waiting period . illustrate , let’s compose \ncomplicated regimen repeat thatIn regimen, daily dosing 7 doses. last dose given\n144 hours. putting sequence, ’ll wait one dosing interval\nwait period start ","code":"\nev_repeat(e1, n = 3).   time amt ii cmt evid addl\n. 1    0 100 24   1    1    0\n. 2   24 100 24   1    1    0\n. 3   48 100 24   1    1    0\nev_repeat(e1, n = 3, as.ev = TRUE)\ne1 <- ev(amt = 500, ii = 24)\ne2 <- ev(amt = 250, ii = 24, addl = 5)\ne3 <- ev_seq(e1, e2)\n\ne3 %>% realize_addl(). Events:\n.   time amt ii addl cmt evid\n. 1    0 500  0    0   1    1\n. 2   24 250  0    0   1    1\n. 3   48 250  0    0   1    1\n. 4   72 250  0    0   1    1\n. 5   96 250  0    0   1    1\n. 6  120 250  0    0   1    1\n. 7  144 250  0    0   1    1\nev_repeat(e3, n = 3, wait = 7*24).   time amt ii addl cmt evid\n. 1    0 500 24    0   1    1\n. 2   24 250 24    5   1    1\n. 3  336 500 24    0   1    1\n. 4  360 250 24    5   1    1\n. 5  672 500 24    0   1    1\n. 6  696 250 24    5   1    1"},{"path":"event-chapter.html","id":"create-a-data_set","chapter":"4 Event objects","heading":"4.5.4 Create a “data_set”","text":"Use as_data_set() function combine multiple event objects single\ndata set.’s important note thatThe result regular old data.frame(); call as_data_set(),\nexit event object worldEach event object given different IDRecall can create event objects multiple IDs; as_data_set()\nhandy use featureNotice as_data_set created unique IDs 3 subjects \n100 mg group, 3 subjects 200 mg group, 2 subjects \n300 mg group.’ll cover function called ev_rep() “expand” event object \nmultiple individuals","code":"\nas_data_set(e1, e2).   ID time cmt evid amt ii addl\n. 1  1    0   1    1 500 24    0\n. 2  2    0   1    1 250 24    5\nas_data_set(\n  ev(amt = 100, ID = 1:3), \n  ev(amt = 200, ID = 1:3), \n  ev(amt = 300, ID = 1:2)\n).   ID time cmt evid amt\n. 1  1    0   1    1 100\n. 2  2    0   1    1 100\n. 3  3    0   1    1 100\n. 4  4    0   1    1 200\n. 5  5    0   1    1 200\n. 6  6    0   1    1 200\n. 7  7    0   1    1 300\n. 8  8    0   1    1 300\nas_data_set(\n  e1 %>% ev_rep(1:300),\n  e2 %>% ev_rep(1:300)\n)"},{"path":"event-chapter.html","id":"modifying-an-event-object","chapter":"4 Event objects","heading":"4.6 Modifying an event object","text":"","code":""},{"path":"event-chapter.html","id":"tidy-like-manipulation","chapter":"4 Event objects","heading":"4.6.1 Tidy-like manipulation","text":"Event objects can mutatedColumns can removed event objectsRows can removed event objects","code":"\nmutate(e, amt = 200). Events:\n.   time amt rate cmt evid\n. 1    1 200   50   2    1\nev(amt = 100, WT = 50, AGE = 12) %>% select(-WT). Events:\n.   time amt cmt evid AGE\n. 1    0 100   1    1  12\ne <- c(ev(amt = 100), ev(amt = 200, time = 12), ev(amt = 300, time = 24))\n\nfilter(e, time <= 12). Events:\n.   time amt cmt evid\n. 1    0 100   1    1\n. 2   12 200   1    1"},{"path":"event-chapter.html","id":"realize_addl","chapter":"4 Event objects","heading":"4.6.2 realize_addl","text":"“Additional” doses can made explicit event object","code":"\nev(amt = 100, ii = 6, addl = 3) %>% realize_addl(). Events:\n.   time amt ii addl cmt evid\n. 1    0 100  0    0   1    1\n. 2    6 100  0    0   1    1\n. 3   12 100  0    0   1    1\n. 4   18 100  0    0   1    1"},{"path":"event-chapter.html","id":"ev_rep","chapter":"4 Event objects","heading":"4.6.3 ev_rep","text":"Event objects can “expanded” multiple IDs create population;\nuse ev_rep() function .default, ev_rep() returns regular data frame. can request \nevent object returnedev_rep() can work event object complexity.","code":"\nev(amt = 100) %>% ev_rep(1:5).     ID time amt cmt evid\n. 1    1    0 100   1    1\n. 1.1  2    0 100   1    1\n. 1.2  3    0 100   1    1\n. 1.3  4    0 100   1    1\n. 1.4  5    0 100   1    1\nev(amt = 100) %>% ev_rep(1:5, as.ev = TRUE)"},{"path":"event-chapter.html","id":"creative-composition","chapter":"4 Event objects","heading":"4.7 Creative composition","text":"mrgsolve couple creative ways construct event objects.","code":""},{"path":"event-chapter.html","id":"ev_days","chapter":"4 Event objects","heading":"4.7.1 ev_days","text":"ev_days() create dosing sequences dosing certain days (\nweek). example, dose Monday, Wednesday, Friday monthWe can see works simulating regimen","code":"\ne <- ev_days(ev(amt = 100), ii = 168, addl = 3, days = 'm,w,f')\ne.   time amt cmt evid  ii addl\n. 1    0 100   1    1 168    3\n. 2   48 100   1    1 168    3\n. 3   96 100   1    1 168    3\nmrgsim_e(mod, e, end = 168*4) %>% plot(\"CP\")"},{"path":"event-chapter.html","id":"ev_rx","chapter":"4 Event objects","heading":"4.7.2 ev_rx","text":"ev_rx() way write regimen notation similar \nmight see prescription. example, 100 mg twice daily 3 doses \ncompartment 2 beTo code infusionSee ev_rx() documentation details limitations.","code":"\nev_rx(\"100 mg q12h x3 in 2\"). Events:\n.   time amt ii addl cmt evid\n. 1    0 100 12    2   2    1\nev_rx(\"500 mg over 2 hours q 24 h x3 in 1\"). Events:\n.   time amt rate ii addl cmt evid\n. 1    0 500  250 24    2   1    1"},{"path":"event-chapter.html","id":"ref-evd","chapter":"4 Event objects","heading":"4.8 Upper case names","text":"’ll notice previous sections column names \nrendered lower case letters convert event object \ndata set like object:event object use simulate, ’ll see lower case names\nsimulated output. reasons historical behavior\nunlikely change goes far back history mrgsolve.Nevertheless, recent versions mrgsolve included similar constructor\nfunctions render column names upper case commonly seen\nanalysis data sets.evd() constructor behaves just like ev(), render upper\ncase names coerced data set used simulation.d evd() indicates event object render names like\nData set see reminder data set like nature \nobject printed.object rendered data frame, see names rendered \nupper caseYou can also coerce event object created ev() one behaves\ncreated via evd()important note case column names aren’t made upper\ncase data frame rendered. , previous example, time \namt lower case rendered yet. want work\nobject rendered, sure lower case names rendering\nupper case rendering. example use rate following\nexample, RATE:can coerce traditional event object data like event object withAnd finally, two utility functions changing names \ndata like event object. convert upper case use uctran()convert lower case, use lctran()utility functions also work event objects. example,","code":"\nas.data.frame(ev(amt = 100)).   time amt cmt evid\n. 1    0 100   1    1\ne <- evd(amt = 100)\n\ne. Events Data:\n.   time amt cmt evid\n. 1    0 100   1    1\nas.data.frame(e).   TIME AMT CMT EVID\n. 1    0 100   1    1\nas.evd(ev(amt = 100)). Events Data:\n.   time amt cmt evid\n. 1    0 100   1    1\nevd(amt = 100) %>% mutate(rate = amt / 5). Events Data:\n.   time amt rate cmt evid\n. 1    0 100   20   1    1\nas.evd(ev(amt = 100)). Events Data:\n.   time amt cmt evid\n. 1    0 100   1    1\nev(amt = 100) %>% as_data_set() %>% uctran().   TIME AMT CMT EVID ID\n. 1    0 100   1    1  1\nevd(amt = 100) %>% as_data_set() %>% lctran().   time amt cmt evid ID\n. 1    0 100   1    1  1\nev(amt = 100) %>% uctran(). Events Data:\n.   time amt cmt evid\n. 1    0 100   1    1"},{"path":"matrix-chapter.html","id":"matrix-chapter","chapter":"5 Model Matrices","heading":"5 Model Matrices","text":"Model matrices include $OMEGA (subject-level variability) $SIGMA\n(residual unexplained variability). matrices coded \nmodel file (see Sections 2.2.16 2.2.17) can\nmanipulated different ways via model object. , $OMEGA \n$SIGMA matrices handled using identical approach (names \nfunctions change), focus working $OMEGA following\nexamples references equivalent functions can used \nwork $SIGMA. Also note , simplicity, compile \nexamples presented chapter.","code":""},{"path":"matrix-chapter.html","id":"basics","chapter":"5 Model Matrices","heading":"5.1 Basics","text":"","code":""},{"path":"matrix-chapter.html","id":"simple-matrix-lists","chapter":"5 Model Matrices","heading":"5.1.1 Simple matrix lists","text":"can look popex model internal library starting example\nshow model matrices can seen model object.model loadedWe can print model object console see matrix structureIn output, see omega 3 3 matrix sigma 1 1.\ncan view matrices calling revar() model objectThis shows 3x3 $OMEGA matrix -diagonals set zero \n1x1 $SIGMA currently fixed 0.$OMEGA matrix can extracted omat() functionUse smat() function extract $SIGMA matrix. result \ncalls matlist objects; $OMEGA class omegalist (\ninherits matlist)$SIGMA sigmalist. lists matrices. \nexample, just one $OMEGA block codeso length omegalist object also 1Functions provided check namesand labelsas well getting dimensions number rowsThe omegalist (sigmalist) object can converted standard R listor can rendered matrix","code":"\nmod <- modlib(\"popex\", compile = FALSE)\nmod. \n. \n. ----------------  source: popex.cpp  ----------------\n. \n.   project: /Users/kyleb/Rli...gsolve/models\n.   shared object: popex-so-4f01221b77ee <not loaded>\n. \n.   time:          start: 0 end: 240 delta: 0.5\n.                  add: <none>\n. \n.   compartments:  GUT CENT [2]\n.   parameters:    TVKA TVCL TVV WT [4]\n.   captures:      CL V ECL IPRED DV [5]\n.   omega:         3x3 \n.   sigma:         1x1 \n. \n.   solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n. ------------------------------------------------------\nrevar(mod). $omega\n. $...\n.       [,1] [,2] [,3]\n. ECL:   0.3  0.0  0.0\n. EV:    0.0  0.1  0.0\n. EKA:   0.0  0.0  0.5\n. \n. \n. $sigma\n. $...\n.     [,1]\n. 1:     0\nomat(mod). $...\n.       [,1] [,2] [,3]\n. ECL:   0.3  0.0  0.0\n. EV:    0.0  0.1  0.0\n. EKA:   0.0  0.0  0.5\nomat(mod) %>% class(). [1] \"omegalist\"\n. attr(,\"package\")\n. [1] \"mrgsolve\"\nblocks(mod, OMEGA). \n. Model file: popex.cpp \n. \n. $OMEGA\n. @labels ECL EV EKA\n. 0.3 0.1 0.5\nom <- omat(mod)\nlength(om). [1] 1\nnames(om). [1] \"...\"\nlabels(om). [[1]]\n. [1] \"ECL\" \"EV\"  \"EKA\"\ndim(om). $...\n. [1] 3 3\nnrow(om). ... \n.   3\nas.list(om) %>% str(). List of 1\n.  $ ...: num [1:3, 1:3] 0.3 0 0 0 0.1 0 0 0 0.5\n.   ..- attr(*, \"dimnames\")=List of 2\n.   .. ..$ : chr [1:3] \"ECL\" \"EV\" \"EKA\"\n.   .. ..$ : chr [1:3] \"ECL\" \"EV\" \"EKA\"\nas.matrix(om).      [,1] [,2] [,3]\n. [1,]  0.3  0.0  0.0\n. [2,]  0.0  0.1  0.0\n. [3,]  0.0  0.0  0.5"},{"path":"matrix-chapter.html","id":"multiple-matrix-lists","chapter":"5 Model Matrices","heading":"5.1.2 Multiple matrix lists","text":"Let’s look example complicated $OMEGA structure.$OMEGA block codes diagonal matrix; interesting feature \n3 different $OMEGA blocks.Now, look modelWe see $OMEGA one 3x3 matrix, one 2x2 matrix 4x4 matrix, \norder. Calling revar() model objectwe see $OMEGA matrices model coded. Now length\nomegalist object 3and number rows 3 first matrix, 2 second, 4 \nthirdWe can also check dim()omega matrix can converted segmented list single block\nmatrixThe result 9x9 diagonals different list positions\nset zero.Otherwise, might work object list","code":"\ncode <- '\n$OMEGA @name first @labels a b c\n1 2 3\n\n$OMEGA @name second @labels d e\n4 5\n\n$OMEGA @name third @labels f g h i\n6 7 8 9\n'\nmod <- mcode(\"multiple-matrices\", code, compile = FALSE)\nmod. \n. \n. ----------  source: multiple-matrices.cpp  ----------\n. \n.   project: /private/var/fol.../T/RtmpRhpojT\n.   shared object: multiple-matrices-so-4f01673abfd9 <not loaded>\n. \n.   time:          start: 0 end: 24 delta: 1\n.                  add: <none>\n. \n.   compartments:  <none>\n.   parameters:    <none>\n.   captures:       <none>\n.   omega:         3x3,2x2,4x4 \n.   sigma:         0x0 \n. \n.   solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n. ------------------------------------------------------\nrevar(mod). $omega\n. $first\n.     [,1] [,2] [,3]\n. a:     1    0    0\n. b:     0    2    0\n. c:     0    0    3\n. \n. $second\n.     [,1] [,2]\n. d:     4    0\n. e:     0    5\n. \n. $third\n.     [,1] [,2] [,3] [,4]\n. f:     6    0    0    0\n. g:     0    7    0    0\n. h:     0    0    8    0\n. i:     0    0    0    9\n. \n. \n. $sigma\n. No matrices found\nlength(omat(mod)). [1] 3\nnrow(omat(mod)).  first second  third \n.      3      2      4\ndim(omat(mod)). $first\n. [1] 3 3\n. \n. $second\n. [1] 2 2\n. \n. $third\n. [1] 4 4\nas.matrix(omat(mod)).       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n.  [1,]    1    0    0    0    0    0    0    0    0\n.  [2,]    0    2    0    0    0    0    0    0    0\n.  [3,]    0    0    3    0    0    0    0    0    0\n.  [4,]    0    0    0    4    0    0    0    0    0\n.  [5,]    0    0    0    0    5    0    0    0    0\n.  [6,]    0    0    0    0    0    6    0    0    0\n.  [7,]    0    0    0    0    0    0    7    0    0\n.  [8,]    0    0    0    0    0    0    0    8    0\n.  [9,]    0    0    0    0    0    0    0    0    9\nas.list(omat(mod)). $first\n.   a b c\n. a 1 0 0\n. b 0 2 0\n. c 0 0 3\n. \n. $second\n.   d e\n. d 4 0\n. e 0 5\n. \n. $third\n.   f g h i\n. f 6 0 0 0\n. g 0 7 0 0\n. h 0 0 8 0\n. i 0 0 0 9"},{"path":"matrix-chapter.html","id":"collapsing-matrices","chapter":"5 Model Matrices","heading":"5.2 Collapsing matrices","text":"functionality described subsection new mrgsolve 1.0.0.structure matrices order appear list\nmatter updating matrix (see ). saw create one big\nmatrix smaller matrices using .matrix(). section\ndescribes combine matrices within confines matlist object.mrgsolve provides functions collapse (combine) matrices matlist\nobject. can call collapse_omega(), passing model objectand now omegalist object inside model object matrix\nsingle 9x9 $OMEGA matrix. row names retained, \nnow name matrix; can provided collapsingSuppose want combine first two matrices, leaving third\nmatrix alone. case, call collapse_omega() range argumentNow matlist topology changed; still 9 (total) rows columns,\nmatlist object length 2 5x5 first position (newly\nnamed first_second) old 4x4 matrix second position. Collapsing\nmatrices irreversible process; time mechanism \ncut matrices back smaller chunks. collapsing matrices can helpful\nneed updated.Use collapse_sigma() collapse $SIGMA matrices needed.Also, function collapse_matrix() can called omegalist \nsigmalist object collapse","code":"\ncollapse_omega(mod) %>% revar(). $omega\n. $...\n.     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n. a:     1    0    0    0    0    0    0    0    0\n. b:     0    2    0    0    0    0    0    0    0\n. c:     0    0    3    0    0    0    0    0    0\n. d:     0    0    0    4    0    0    0    0    0\n. e:     0    0    0    0    5    0    0    0    0\n. f:     0    0    0    0    0    6    0    0    0\n. g:     0    0    0    0    0    0    7    0    0\n. h:     0    0    0    0    0    0    0    8    0\n. i:     0    0    0    0    0    0    0    0    9\n. \n. \n. $sigma\n. No matrices found\ncollapse_omega(mod, name = \"only\") %>% omat(). $only\n.     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n. a:     1    0    0    0    0    0    0    0    0\n. b:     0    2    0    0    0    0    0    0    0\n. c:     0    0    3    0    0    0    0    0    0\n. d:     0    0    0    4    0    0    0    0    0\n. e:     0    0    0    0    5    0    0    0    0\n. f:     0    0    0    0    0    6    0    0    0\n. g:     0    0    0    0    0    0    7    0    0\n. h:     0    0    0    0    0    0    0    8    0\n. i:     0    0    0    0    0    0    0    0    9\ncollapse_omega(mod, range = c(1,2), name = \"first_second\") %>% omat(). $first_second\n.     [,1] [,2] [,3] [,4] [,5]\n. a:     1    0    0    0    0\n. b:     0    2    0    0    0\n. c:     0    0    3    0    0\n. d:     0    0    0    4    0\n. e:     0    0    0    0    5\n. \n. $third\n.     f g h i\n. f:  6 0 0 0\n. g:  0 7 0 0\n. h:  0 0 8 0\n. i:  0 0 0 9\nomat(mod) %>% collapse_matrix(range = c(2,NA)). $first\n.     a b c\n. a:  1 0 0\n. b:  0 2 0\n. c:  0 0 3\n. \n. $...\n.     [,1] [,2] [,3] [,4] [,5] [,6]\n. d:     4    0    0    0    0    0\n. e:     0    5    0    0    0    0\n. f:     0    0    6    0    0    0\n. g:     0    0    0    7    0    0\n. h:     0    0    0    0    8    0\n. i:     0    0    0    0    0    9"},{"path":"matrix-chapter.html","id":"matrix-update","chapter":"5 Model Matrices","heading":"5.3 Updating $OMEGA and $SIGMA  ","text":"Like values parameters parameter list, may want update \nvalues $OMEGA $SIGMA matrices. can without re-compiling \nmodel.","code":""},{"path":"matrix-chapter.html","id":"matrix-helper-functions","chapter":"5 Model Matrices","heading":"5.3.1 Matrix helper functions","text":"mrgsolve keeps $OMEGA $SIGMA block matrices (regardless whether\n-diagonal elements zeros ). Recall model\nspecification file can enter data $OMEGA $SIGMA lower\ntriangle matrix (see section 2.2.16). R, need \nprovide matrix (R object). mrgsolve provides convenience\nfunctions help … allowing user enter lower diagonals instead \nfull matrix.dmat() diagonal matrixbmat() block matrixcmat() block matrix diagonal elements variances \n-diagonals taken correlations, covariancesmrgsolve convert correlations covariances.mrgsolve also provides as_bmat() as_dmat() converting R\nobjects matrices lists matrices.Consider list named elements holding data matrix:data form either 3x3 diagonal matrix 2x2 block matrix. \nnames suggest 2x2 form. as_bmat() can make matrix like thisThe second argument regular expression mrgsolve uses find\nelements list use building matrix.Frequently, estimates data frame like thisWe can use as_bmat() data frame extract $OMEGA matricesThe result calling as_bmat as_dmat list matrices, one \nrow data frame.Note example, calledto grab $SIGMA matrices.help helper functions, see ?dmat, ?bmat, ?cmat, ?as_bmat,\n?as_dmat R help system loading mrgsolve.","code":"\ndmat(1,2,3).      [,1] [,2] [,3]\n. [1,]    1    0    0\n. [2,]    0    2    0\n. [3,]    0    0    3\nbmat(1,2,3).      [,1] [,2]\n. [1,]    1    2\n. [2,]    2    3\ncmat(0.1, 0.87,0.3).           [,1]      [,2]\n. [1,] 0.1000000 0.1506884\n. [2,] 0.1506884 0.3000000\nm <- list(OMEGA1.1 = 0.9, OMEGA2.1 = 0.3, OMEGA2.2 = 0.4)\nas_bmat(m, \"OMEGA\").      [,1] [,2]\n. [1,]  0.9  0.3\n. [2,]  0.3  0.4\ndata(exBoot)\nhead(exBoot).   run  THETA1 THETA2  THETA3 OMEGA11   OMEGA21 OMEGA22 OMEGA31  OMEGA32 OMEGA33\n. 1   1 -0.7634  2.280  0.8472 0.12860  0.046130  0.2874 0.13820 -0.02164  0.3933\n. 2   2 -0.4816  2.076  0.5355 0.12000  0.051000  0.2409 0.06754 -0.07759  0.3342\n. 3   3 -0.5865  2.334 -0.4597 0.11460  0.097150  0.2130 0.16650  0.18100  0.4699\n. 4   4 -0.6881  1.824  0.7736 0.14990  0.000003  0.2738 0.24700 -0.05466  0.5536\n. 5   5  0.2909  1.519 -1.2440 0.07308  0.003842  0.2989 0.06475  0.05078  0.2500\n. 6   6  0.1135  2.144 -1.0040 0.13390 -0.019270  0.1640 0.10740 -0.01170  0.3412\n.    SIGMA11 SIGMA21 SIGMA22\n. 1 0.002579       0  1.0300\n. 2 0.002228       0  1.0050\n. 3 0.002418       0  1.0890\n. 4 0.002177       0  0.8684\n. 5 0.001606       0  0.8996\n. 6 0.002134       0  0.9744\nomegas <- as_bmat(exBoot, \"OMEGA\")\nlength(omegas). [1] 100\ndim(exBoot). [1] 100  13\nomegas[[6]].          [,1]     [,2]    [,3]\n. [1,]  0.13390 -0.01927  0.1074\n. [2,] -0.01927  0.16400 -0.0117\n. [3,]  0.10740 -0.01170  0.3412\nomegas[[16]].         [,1]    [,2]   [,3]\n. [1,] 0.08126 0.01252 0.1050\n. [2,] 0.01252 0.16860 0.0149\n. [3,] 0.10500 0.01490 0.4062\nsigmas <- as_bmat(exBoot,\"SIGMA\") "},{"path":"matrix-chapter.html","id":"fill-a-matrix-with-zeros","chapter":"5 Model Matrices","heading":"5.3.2 Fill a matrix with zeros","text":"Sometimes write population model includes random effects, \nlike simulate model without random effects implemented.\nexample, want simulate typical PK profiles population PK\nmodel includes IIV parameters / RUV simulated\noutputs., pass model zero_re() function. default, \nconvert $OMEGA $SIGMA matrix elements zeros. See R help\nfile (?zero_re) see options selectively zeroing one \n.example population PK modelWe can turn matrix zeros withAnd simulate right , ETA(n) zero well\n’ll get fixed-effects simulation (following example\nevaluated)","code":"\nmod <- modlib(\"popex\", compile = FALSE)\n\nomat(mod). $...\n.       [,1] [,2] [,3]\n. ECL:   0.3  0.0  0.0\n. EV:    0.0  0.1  0.0\n. EKA:   0.0  0.0  0.5\nmod %>% zero_re() %>% omat(). $...\n.       [,1] [,2] [,3]\n. ECL:     0    0    0\n. EV:      0    0    0\n. EKA:     0    0    0\nmod %>% \n  zero_re() %>% \n  ev(amt = 100) %>% \n  mrgsim() %>%\n  plot()"},{"path":"matrix-chapter.html","id":"example-unnamed-matrix","chapter":"5 Model Matrices","heading":"5.3.3 Example: unnamed matrix","text":"model 3x3 $OMEGA matrixLet’s check values matrix using omat()also use omat() update values matrixTo update $OMEGA, must provide matrix dimension, \ncase 3x3. error generated provide matrix wrong dimension.","code":"\ncode <- '\n$OMEGA\n1 2 3\n'\n\nmod <- mcode(\"matrix\", code, compile=FALSE)\nmod %>% omat. $...\n.     [,1] [,2] [,3]\n. 1:     1    0    0\n. 2:     0    2    0\n. 3:     0    0    3\nmod %>% omat(dmat(4,5,6)) %>% omat. $...\n.     [,1] [,2] [,3]\n. 1:     4    0    0\n. 2:     0    5    0\n. 3:     0    0    6\nans <- try(mod %>% omat(dmat(11,23))). Error : improper signature: omat\nans. [1] \"Error : improper signature: omat\\n\"\n. attr(,\"class\")\n. [1] \"try-error\"\n. attr(,\"condition\")\n. <simpleError: improper signature: omat>"},{"path":"matrix-chapter.html","id":"example-named-matrices","chapter":"5 Model Matrices","heading":"5.3.4 Example: named matrices","text":"multiple $OMEGA matrices, can helpful assign \nnames. , two matrices: one interindividual variability\n(IIV) one interoccasion variability (IOV).Now, can update either IIV IOV () nameAgain, error generated try assign 3x3 matrix IOV\nposition","code":"\ncode <- '\n$OMEGA @name IIV\n1 2 3\n$OMEGA @name IOV\n4 5\n'\nmod <- mcode(\"iov\", code, compile=FALSE)\n\nrevar(mod). $omega\n. $IIV\n.     [,1] [,2] [,3]\n. 1:     1    0    0\n. 2:     0    2    0\n. 3:     0    0    3\n. \n. $IOV\n.     [,1] [,2]\n. 4:     4    0\n. 5:     0    5\n. \n. \n. $sigma\n. No matrices found\nmod %>% \n  omat(IOV = dmat(11,12), IIV = dmat(13, 14, 15)) %>% \n  omat. $IIV\n.     [,1] [,2] [,3]\n. 1:    13    0    0\n. 2:     0   14    0\n. 3:     0    0   15\n. \n. $IOV\n.     [,1] [,2]\n. 4:    11    0\n. 5:     0   12\nans <- try(mod %>% omat(IIV = dmat(1, 2))). Error : improper dimension: omat\nans. [1] \"Error : improper dimension: omat\\n\"\n. attr(,\"class\")\n. [1] \"try-error\"\n. attr(,\"condition\")\n. <simpleError: improper dimension: omat>"},{"path":"matrix-chapter.html","id":"example-unnamed-matrices","chapter":"5 Model Matrices","heading":"5.3.5 Example: unnamed matrices","text":"write model unnamed matrices, can still update themIn case, way update pass list matrices, \n(example) first matrix 3x3 second 2x2","code":"\ncode <- '\n$OMEGA\n1 2 3\n\n$OMEGA \n4 5\n'\nmod <- mcode(\"multi\", code, compile = FALSE)\nmod %>% omat(list(dmat(5, 6, 7), dmat(8, 9))) %>% omat(). $...\n.     [,1] [,2] [,3]\n. 1:     5    0    0\n. 2:     0    6    0\n. 3:     0    0    7\n. \n. $...\n.     [,1] [,2]\n. 4:     8    0\n. 5:     0    9"},{"path":"simulated-output.html","id":"simulated-output","chapter":"6 Simulated output","heading":"6 Simulated output","text":"","code":""},{"path":"simulated-output.html","id":"output-types","chapter":"6 Simulated output","heading":"6.1 Output types","text":"mrgsim() used simulate model, default returns object class\nmrgsims. S4 object containing data.frame simulated output \nhandful pieces data related simulation run can coerced \ntypes (like data.frame tibble).simulations large outputs extremely brief simulations efficiency \nimportant, users can request output returned data frame. efficient\nfeatures provided mrgsims object needed. , pass\noutput argument mrgsim()use mrgsim_df()","code":"\nout <- mrgsim(mod, ..., output = \"df\")\nout <- mrgsim_df(mod, ....)"},{"path":"simulated-output.html","id":"methods-for-mrgsim-output","chapter":"6 Simulated output","heading":"6.2 Methods for mrgsim output","text":"mrgsolve provides several methods working mrgsims objects \ncoercing simulation matrix R objects. Note discussion \nfollowing subsections refer working mrgsims objects, data.frame output.","code":""},{"path":"simulated-output.html","id":"coercion-methods","chapter":"6 Simulated output","heading":"6.2.1 Coercion methods","text":"as_tibble(): convert tibbleas.data.frame(): convert data.frameas.matrix(): convert matrix","code":""},{"path":"simulated-output.html","id":"query-methods","chapter":"6 Simulated output","heading":"6.2.2 Query methods","text":"head(): shows first n = 5 rowstail(): shows last n = 5 rowsnames(): shows column namesdim(): shows number rows columnssummary(): shows numeric summary columns$: extracts column","code":""},{"path":"simulated-output.html","id":"graphical-methods","chapter":"6 Simulated output","heading":"6.2.3 Graphical methods","text":"plot() methods simulated output aware independent dependent\nvariables simulation. simulated output (mrgsims object)Plot formula; following example selects CP RESPONSE outputs\nplots versus timeTo select large number responses plot, pass character vector comma-separated\ncharacter data containing output columns plot","code":"\nplot(out)\nplot(out, CP + RESPONSE ~ time)\nplot(out, \"CP, RESPONSE, WT, DOSE\")"},{"path":"simulated-output.html","id":"methods-for-dplyr-verbs","chapter":"6 Simulated output","heading":"6.2.4 Methods for dplyr verbs","text":"mrgsolve provides several S3 methods make possible include dplyr verbs \nsimulation pipeline.exampleHere, mrgsim() returns mrgsims object. dplyr also loaded, object\ncan piped directly dplyr::filter() dplyr::mutate() etc.important note mrgsims output piped dplyr functionality,\ncoerced tibble (data.frame) way get data back \nmrgsims object. time, desirable need explicitly\ncoerce tibble() calling dplyr verbs simulated output.dplyr functions can used mrgsims objectsgroup_by()mutate()filter()summarise()select()slice()pull()distinct()slice()","code":"\nlibrary(dplyr)\nlibrary(mrgsolve)\n\nmod <- mrgsolve:::house()\n\nmod %>% \n  ev(amt=100) %>%\n  mrgsim() %>% \n  filter(time >= 10)"},{"path":"simulated-output.html","id":"modify-methods","chapter":"6 Simulated output","heading":"6.2.5 Modify methods","text":"can modify underlying data mrgsims object keep mrgsims object.filter_sims(): calls dplyr::filter() pick rows keep discardselect_sims(): calls dplyr::select(); note ID time columns always retainedmutate_sims(): calls dplyr::mutate() add modify columns","code":""},{"path":"simulated-output.html","id":"controlling-output-scope","chapter":"6 Simulated output","heading":"6.3 Controlling output scope","text":"","code":""},{"path":"simulated-output.html","id":"background","chapter":"6 Simulated output","heading":"6.3.1 Background","text":"Limiting volume simulated data can major impact simulation efficiency,\nmemory footprint, ease (lack ease) reviewing dealing output.\nlarge simulation simulation large model, user consider\nselecting gets returned simulation performed.default, mrgsim() returns data.frame followingID: regardless whether simulated population nottime / TIME: independent variableSimulated values model compartmentsSimulated values derived outputs listed $CAPTUREYou always get ID time compartments captured items must\nwritten model file. defines list data items \n(possibly) get returned items 3 4 . : must \nwritten model file locked time model compiled.However, mrgsolve allows user pick actually returned run time.\ndone run time, different runs can return different data items.\n(importantly) mrgsim() allocates space output data items\nrequested. , opting unneeded outputs decrease memory\nconsumption increase efficiency.","code":""},{"path":"simulated-output.html","id":"implementation","chapter":"6 Simulated output","heading":"6.3.2 Implementation","text":"mrgsolve model object tracks compartments captures currently\nrequested. can queried using outvars()Items listed cmt capture. user can update model object\nnames columns requested passing outvars update()exclude anything isn’t named update. outvars list can\nreset passing ()Remember ... passed mrgsim() also passed update() possible\nselect outputs right mrgsim() call","code":"\nmod <- house()\n\noutvars(mod). $cmt\n. [1] \"GUT\"  \"CENT\" \"RESP\"\n. \n. $capture\n. [1] \"DV\" \"CP\"\nmod <- update(mod, outvars = \"CP, RESP\")\n\noutvars(mod). $cmt\n. [1] \"RESP\"\n. \n. $capture\n. [1] \"CP\"\nmod <- update(mod, outvars = \"(all)\")\nout <- mrgsim(mod, outvars = \"CP, RESP\")"},{"path":"simulated-output.html","id":"copy-items-from-data-to-simulated-output","chapter":"6 Simulated output","heading":"6.3.3 Copy items from data to simulated output","text":"Users can also use carry_out recover copy items input data \noutput. covered different chapter.","code":""},{"path":"section-sequence.html","id":"section-sequence","chapter":"7 Simulation sequence","heading":"7 Simulation sequence","text":"section intended help user understand\nsteps mrgsolve takes working \nsimulation problem. focus order\nmrgsolve calls different user-defined\nfunctions well parameter updates\noutput writing happens simulation\nsequence.","code":""},{"path":"section-sequence.html","id":"functions-to-call","chapter":"7 Simulation sequence","heading":"7.1 Functions to call","text":"model specification results definition\nfour functions mrgsolve calls \nsimulation sequence. Naming \ncode block identifiers, functions $PREAMBLE$MAIN$ODE$TABLE","code":""},{"path":"section-sequence.html","id":"problem-initiation","chapter":"7 Simulation sequence","heading":"7.2 Problem initiation","text":"Just prior starting problem (NEWIND \nequal 0), mrgsolve calls $PREAMBLE. function called\nsimulation sequence. goal $PREAMBLE allow\nuser work different C++ data structures get ready \nsimulation run.","code":""},{"path":"section-sequence.html","id":"subject-initiation","chapter":"7 Simulation sequence","heading":"7.3 Subject initiation","text":"$PREAMBLE call, mrgsolve simulates\nID data set, one another. mrgsolve runs sequence\njust prior simulating given IDCopy parameters found idata_set working\nparameter listCopy parameters found \ndata_set working parameter list,\ncopy taken first actual\ndata set row individual. \nfirst actual data set record data set\nfirst record individual,\nmrgsolve still copies first data\nset record long fillbak argument\nmrgsim TRUE.Set initial estimates base\ninitial estimate listCopy initial estimates idata_set \nfound .Call $MAINStart simulating records individual","code":""},{"path":"section-sequence.html","id":"sequence-for-a-single-record","chapter":"7 Simulation sequence","heading":"7.4 Sequence for a single record","text":"mrgsolve executes sequence working\nrecord record given IDIf nocb (next observation carried backward) TRUE, parameters\ncopied current record actual data set record.\nNote nocb FALSE locf (first observation carried forward)\nassumed TRUE (see ). last parameters \ncopied input data set prior advancing system (locf\nused). Therefore, parameter columns found \nidata_set data_set, value found data_set\noverwrite base list parameter value \ncopied idata_set. error different parameter\nvalues idata_set data-set, value found data_set\nused happens. parameters parameter update\nsequence can found sections 11.3 \n1.1.$MAIN calledThe system advanced via $ODE $PKMODEL,\nwhichever one invoked model specification\nfile.current record dosing record,\ndose implemented (e.g. bolus made \ninfusion started).system advancing according \nlocf, parameters copied \ncurrent record actual data set\nrecord. contrast nocb advance (see\n).$TABLE function calledIf current record marked inclusion\nsimulated output, results \nwritten output matrix.Continue next record individual.last record processed \nindividual, new individual started.","code":""},{"path":"steady-state.html","id":"steady-state","chapter":"8 Steady state","heading":"8 Steady state","text":"","code":""},{"path":"steady-state.html","id":"key-information","chapter":"8 Steady state","heading":"8.1 Key information","text":"Keep reading details; ’m including brief list key items\nfront convenience.Use ss_rtol ss_atol arguments mrgsim() control local error\nestimate mrgsolve finding steady stateUse ss_n limit number doses administered \nadvancing steady state; number doses exceeds ss_n warning\nissued mrgsolve moves onUse ss_fixed = TRUE silence warning ss_n exceeded; \nessentially saying dose ss_n give move without\nwarningUse SS_ADVANCE $ODE check system currently advancedUse ss_cmt [ set ] (inside model) select compartments \nconsidered finding steady state; might better success /\nefficiency focus key compartments (exclude unhelpful compartments\nlike depot compartment)","code":""},{"path":"steady-state.html","id":"introduction-1","chapter":"8 Steady state","heading":"8.2 Introduction","text":"Within mrgsolve, term “steady state” (SS) applies specifically \npharmacokinetic dosing system indicates rate drug administration\nequal rate drug elimination. Steady state dosing can take form\nrepeated intermittent doses (bolus infusion, administered intermittently\ngiven dosing interval) continuous infusion administered steady\nstate.","code":""},{"path":"steady-state.html","id":"intermittent-doses","chapter":"8 Steady state","heading":"8.2.1 Intermittent doses","text":"user can direct mrgsolve advance system steady state \nintermittent dosing including ss=1 event object input data set.\nexample:example, ss=1 flag tells mrgsolve advance system steady\nstate dosing regimen 100 mg every 12 hours (give total \n5 doses). using ss=1 flag, user required indicate \ndosing interval (every 12 hours) additional doses optional. Similar\nbehavior can achieved intermittent infusions setting infusion\nrate.","code":"\nmod <- modlib(\"pk1\", end = 120). Loading model from cache.\ndose <- ev(amt = 100, ii = 12, addl = 4, ss = 1)\n\nmrgsim(mod, dose, recsort = 3) %>% plot()"},{"path":"steady-state.html","id":"continuous-infusion","chapter":"8 Steady state","heading":"8.2.2 Continuous infusion","text":"continuous infusion can dosed steady state including ss=1 flag,\nvalue rate (positive rate -1 rate modeled), \nsetting dose amount (amt/AMT) zero:CL equal 1 model, see continuous\n(never-ending) infusion started steady state value 5.","code":"\ninfus <- ev(amt = 0, rate = 5, ss = 1, cmt = \"CENT\")\n\nmrgsim(mod, infus, recsort = 3) %>% plot()"},{"path":"steady-state.html","id":"advance-to-ss","chapter":"8 Steady state","heading":"8.3 Advance to SS","text":"’s important recognize SS related PK dosing system; \nfinding state system infinite number doses \nadministered certain regimen. essentially mrgsolve goes\nfinding steady state: ss=1 flag encountered, mrgsolve starts\nrepeatedly administering doses advancing system next dose\naccording inter-dose interval (ii). mrgsolve determines \namounts system dose preceding\ndose, mrgsolve declares SS achieved.","code":""},{"path":"steady-state.html","id":"control-advance-to-ss","chapter":"8 Steady state","heading":"8.4 Control advance to SS","text":"","code":""},{"path":"steady-state.html","id":"tolerances-for-ss","chapter":"8 Steady state","heading":"8.4.1 Tolerances for SS","text":"mrgsolve uses local error estimate determine degree \nconcentrations changing changing doses way SS.\ndetermined relative tolerance parameter (ss_rtol) absolute\ntolerance parameter (ss_atol). mrgsolve version 0.10.3, tolerances\ndistinct tolerances used solving differential equations\n(rtol atol, respectively). Note advancing SS ODE\nmodel, ss_rtol (relative tolerance determining SS) must larger\n(less precise) rtol (relative tolerance used ODE solver). \ndifference two trough concentrations less \\(_{trough}\\) *\nss_rtol + ss_atol, system said steady state. \ndefault, calculation done every single compartment model \ncompartments meet criteria system said \nsteady state. , increasing ss_rtol (say 1e-8 1e-3) also allow\nus call “good” respect steady state sooner.tolerances steady state stored model object can set\nupdate method. example,","code":"\nmod <- house()\n\nmod <- update(mod, ss_rtol = 1e-5, ss_atol = 1e-8)"},{"path":"steady-state.html","id":"max-dose-number","chapter":"8 Steady state","heading":"8.4.2 Max dose number","text":"noted mrgsolve advances system steady state \nbrute force approach: doses repeatedly administered regular interval\n(intermittent SS) pre-dose concentrations dose dose.\nmrgsolve sets upper limit (equal 500) \nnumber doses administered giving trying find\nsteady state. maximum number doses exceeded, mrgsolve \nissue warning steady state achieved continue \nproblem. example:, mrgsolve administered 500 doses pre-dose concentrations still\nsimilar enough declare system steady state.maximum dose number can set ss_n argument mrgsim (one\nvariants; see ?do_mrgsim help topic). number can increased \nprevent warning:Alternatively, ss_fixed argument mrgsim (see ?do_mrgsim) can \nset TRUE silence warning. case, ss_n doses \nadministered SS achieved many doses, problem\ncontinue warning.","code":"\ndose <- ev(amt = 100, ii = 12, ss = 1, VC = 800)\n\nout <- mrgsim(house(), dose). Warning in (function (x, data, idata = no_idata_set(), carry_out = carry.out, : [steady_bolus] ID 1 failed to reach steady state\n.   ss_n: 500, ss_rtol: 1e-08, ss_atol: 1e-08\nout <- mrgsim(house(), dose, ss_n  = 1000)"},{"path":"steady-state.html","id":"include-exclude-compartments-for-ss","chapter":"8 Steady state","heading":"8.4.3 Include / exclude compartments for SS","text":"Sometimes might sufficient consider one compartment \ndetermining SS (e.g. central compartment PK model). times,\nmight helpful exclude compartment determining SS (e.g. \ndepot dosing compartment concentrations can get small toward \nend dosing interval).mrgsolve allows user identify compartments include exclude \ndetermining SS. done ss_cmt option $SET. \nconsider CENT compartment, write following model file:says look CENT compartment determining SS.Alternatively, can exclude certain compartments like :says ignore GUT DEPOT compartments determining SS.another example, might want exclude accumulator compartment \ncalculating SSThis just partial model snippet, shows might exclude \nAUC compartment determining SS.","code":"[ set ] ss_cmt = \"CENT\"[ set ] ss_cmt = \"-GUT,DEPOT\"[ set ] ss_cmt = \"-AUC\"\n\n[ ode ] \ndxdt_CENT = -kel * CENT;\n\ndxdt_AUC = CENT/VC;"},{"path":"steady-state.html","id":"ss_advance-flag","chapter":"8 Steady state","heading":"8.4.4 SS_ADVANCE flag","text":"mrgsolve also provides SS_ADVANCE indicator passed $ODE \nevaluates true system advanced steady state. \nbetter way exclude accumulator compartment considered \nSS calculation :code prevents AUC compartment changing advance \nSS dose dose difference AUC always zero, effectively\nexcluding compartment factoring SS determination. \npreferred approach dealing AUC compartment.","code":"[ ode ] \n\ndxdt_AUC = CENT/VC;\n\nif(SS_ADVANCE) dxdt_AUC = 0;"},{"path":"plugins.html","id":"plugins","chapter":"9 Plugins","heading":"9 Plugins","text":"","code":""},{"path":"plugins.html","id":"plugin-autodec","chapter":"9 Plugins","heading":"9.1 autodec","text":"Available mrgsolve version 1.0.0.plugin invoked, mrgsolve search model code assignments\nautomatically declare double precision numbers. following\nblocks searched$PREAMBLE$MAIN ($PK)$ODE ($DES)$TABLE ($ERROR)$PREDFor example, following code requires CL gets assigned typeThis default mrgsolve behavior since beginning.autodec plugin lets write followingmrgsolve find CL = ... understand user initiated\nvariable declare double . Don’t worry WT = 70\n$PARAM; mrgsolve already know won’t try declare .using autodec plugin, can still declare variables \ndouble int bool. mrgsolve already finds variables \nunderstand leave declarations alone. Note may still \nconvenient declare using capture type variables \nwant captured outputThe capture typedef makes Y double; didn’t need declare \nautodec play, decided declare capture copied\nsimulated output.autodec plugin intended straightforward models /\nvariables real valued. mrgsolve can handle valid C++ code\nblocks, possibility code get much \ncomplicated, including custom classes methods. case, recommend\nbypass feature take control declaring variables \ndefault mode.case mrgsolve try declare (double) variable shouldn’t\nhandled way, can note name environment variable inside\nmodel called MRGSOLVE_AUTODEC_SKIPThis can vector variable names declare autodec invoked.","code":"$PARAM WT = 70, TVCL = 1.2\n\n$PK\ndouble CL = TVCL * pow(WT/70, 0.75);$PLUGIN autodec \n\n$PARAM WT = 70, TVCL = 1.2\n\n$PK\nCL = TVCL * pow(WT/70, 0.75);$PLUGIN autodec\n\n$ERROR\ncapture Y = IPRED * exp(EPS(1));$ENV MRGSOLVE_AUTODEC_SKIP = c(\"my_variable_1\")"},{"path":"plugins.html","id":"plugin-nm-vars","chapter":"9 Plugins","heading":"9.2 nm-vars","text":"Available mrgsolve version 1.0.0.nm-vars plugin provides NONMEM-like set macros use \ncoding compartmental model. small subset NONMEM model syntax\nreplicated .F, R, D, ALAGTo set bioavailability nth compartment, use FnTo set infusion rate nth compartment, use RnTo set infusion duration nth compartment, use DnTo set lag time nth compartment, use ALAGnFor exampleA, A_0, DADTTo refer amount nth compartment, use (n)refer initial amount nth compartment, use A_0(n)refer differential equation nth compartment, use DADT(n)exampleMathStarting version 1.0.1, macros provided several math functionsEXP() gets mapped exp()LOG() gets mapped log()SQRT() gets mapped sqrt()purely convenience, upper-case versions NMTRAN don’t\nrequire conversion lower-case; happens automatically via C++\npreprocessor.syntaxUsing THETA(n) model code resolve THETAn; feature \nalways available, even nm-vars hasn’t invoked; mention \nsince fundamental piece NONMEM syntax mrgsolve \ninternalizedUse T $DES refer current time odesolver rather\nSOLVERTIMEReserved words nm-vars invokedThere additional reserved words nm-vars plugin invokedAA_0DADTTIt error use one symbols name parameter \ncompartment try declare variables.mrgsolve syntax still requiredThere lot differences remaining mrgsolve NONMEM syntax. \nmention make pointmrgsolve continues require pow(base, exponent) rather base**exponentmrgsolve continues require semi-colon end statement (\nC++ requirement)mrgsolve continues require user-defined variables declared \ntype, except autodec plugin (Section 9.1) invokedAn exampleThere example syntax (along autodec features) \ninternal model library","code":"$CMT GUT CENT GUT2\n\n$PK\nF1 = 0.87;    // equivalent to F_GUT  = 0.87;\nR2 = 2.25;    // equivalent to R_CENT = 2.25;\nALAG3 = 0.25; // equivalent to ALAG_GUT2 = 0.25; $CMT CMT1 CMT2\n\n$PK\nA_0(2) = 50;\n  \n$DES\nDADT(1) = -KA * A(1);\nDADT(2) =  KA * A(1) - KE * A(2); \nmod <- modlib(\"nm-like\")\nsee(mod). \n. Model file:  nm-like.cpp \n. $PROB Model written with some nonmem-like syntax features\n. \n. $PLUGIN nm-vars autodec\n. \n. $PARAM\n. THETA1 = 1, THETA2 = 21, THETA3 = 1.3, WT = 70, F1I = 0.5, D2I = 2\n. KIN = 100, KOUT = 0.1, IC50 = 10, IMAX = 0.9\n. \n. $CMT @number 3\n. \n. $PK\n. CL = THETA(1) * pow(WT/70, 0.75); \n. V  = THETA(2); \n. KA = THETA(3);\n. \n. F1 = F1I;\n. D2 = D2I;\n. A_0(3) = KIN / KOUT;\n. \n. $DES \n. CP = A(2)/V;\n. INH = IMAX*CP/(IC50 + CP);\n.   \n. DADT(1) = -KA*A(1);\n. DADT(2) =  KA*A(1) - (CL/V)*A(2);\n. DADT(3) =  KIN * (1-INH) - KOUT * A(3);\n. \n. $ERROR\n. CP = A(2)/V;"},{"path":"plugins.html","id":"plugin-tad","chapter":"9 Plugins","heading":"9.3 tad","text":"Purpose\nAdvanced calculation time dose within model. call “advanced”\nlets track doses multiple compartments. See note \nsimpler way calculate time dose work fine doses\nsingle compartment. functionality provided mrgsolve.UsageFirst, tell mrgsolve want use tad pluginThe create tadose objects, one compartment want track\ntime dose. One approach [ global ]Notice pass compartment number want track \ncase also refer mrg:: namespace tadose class.tadose objects contain following (public) memberscmt compartment tracktold time last dose; defaults -1e9had_dose indicates dose already given current\nindividualtad(self) function call calculate time dose\nself object (Section 2.3.12) must passed \nargument\nmember function called prior first administered dose, \nvalue -1.0 returned\nself object (Section 2.3.12) must passed \nargumentwhen member function called prior first administered dose, \nvalue -1.0 returnedreset() resets state object; sure reset prior simulating\nnew individualAs example, can call reset() method one tadose objectsYou can find source code object\n.working example model tracks doses compartments 1 2 \nprovided hereStatic approachAnother approach make static [ main ] approach\nwork use [ main ]; [ global ] approach\npreferable since can access object block (function).","code":"$PLUGIN tad[plugin] tad\n\n[ global ] \nmrg::tadose tad_cmt_1(1); \nmrg::tadose tad_cmt_2(2);tad_cmt_1.reset();[plugin] tad\n\n[ global ] \nmrg::tadose tad_cmt_1(1); \nmrg::tadose tad_cmt_2(2);\n\n[ pkmodel ] cmt = \"GUT,CENT\", depot = TRUE\n\n[ param ] CL = 1, V = 20, KA = 1\n\n[ main ] \ncapture tad1 = tad_cmt_1.tad(self); \ncapture tad2 = tad_cmt_2.tad(self);"},{"path":"plugins.html","id":"note","chapter":"9 Plugins","heading":"9.3.1 Note","text":"Note simpler way calculate time dose dosing \nsingle compartmentThe self object (Section 2.3.20) contains tad() member \ntrack time dose. Note needs called every record.","code":"[ main ]\ndouble tad = self.tad();"},{"path":"plugins.html","id":"plugin-cxx11","chapter":"9 Plugins","heading":"9.4 CXX11","text":"PurposeCompile model file C++11 standard.Usage","code":"$PLUGIN CXX11"},{"path":"plugins.html","id":"plugin-rcpp","chapter":"9 Plugins","heading":"9.5 Rcpp","text":"PurposeLink Rcpp headers model.UsageNote model linked Rcpp, can start using \nfunctionality immediately (without including Rcpp.h).useful feature provided Rcpp exposes dpqr\nfunctions normally use R (e.g. rnorm() runif()). , \nwant simulate number Uniform (0,1) can writeNote arguments R version (?runif) except\nn argument; always get one draw.Information Rcpp can found : https://github.com/RcppCore/Rcpp","code":"$PLUGIN Rcpp$PLUGIN Rcpp\n\n$TABLE\ndouble uni = R::runif(0,1);"},{"path":"plugins.html","id":"plugin-mrgx","chapter":"9 Plugins","heading":"9.6 mrgx","text":"Compile extra C++ / Rcpp functions can helpful \nadvanced model coding. mrgx plugin dependent \nRcpp plugin.functions provided mrgx namespace name,\ninvoke functions, always prepend mrgx::.","code":""},{"path":"plugins.html","id":"get-the-model-environment","chapter":"9 Plugins","heading":"9.6.1 Get the model environment","text":"Note model object (mod) contains R environment. \nexampleThe objects environment created block called $ENV\nmodel code (see Section 2.2.26);access environment model, call","code":"\nmrgsolve::house()@envir. <environment: 0x7fda1a1b94f0>Rcpp::Environment env = mrgx::get_envir(self);"},{"path":"plugins.html","id":"extract-an-object-from-the-model-environment","chapter":"9 Plugins","heading":"9.7 Extract an object from the model environment","text":"object created $ENVYou can extract object ","code":"[ env ] \nrand <- rnorm(100)[ preamble ]\nRcpp::NumericVector draw = mrgx::get(\"rand\", self);"},{"path":"plugins.html","id":"rcpparmadillo","chapter":"9 Plugins","heading":"9.8 RcppArmadillo","text":"PurposeLink RcppArmadillo headers model.UsageInformation armadillo can found : http://arma.sourceforge.net/\nInformation RcppArmadillo can found :\nhttps://github.com/RcppCore/RcppArmadillo","code":"$PLUGIN RcppArmadillo"},{"path":"plugins.html","id":"bh","chapter":"9 Plugins","heading":"9.9 BH","text":"PurposeLink boost headers model.UsageNote model linked BH (boost), able \ninclude boost header file need. include header\nfile contains boost function want use.Information boost can found : https://boost.org. Information\nBH can found : https://github.com/eddelbuettel/bh","code":"$PLUGIN BH"},{"path":"mtime.html","id":"mtime","chapter":"10 Modeled events","heading":"10 Modeled events","text":"Modeled events interventions can introduce \nsimulation within model. aren’t different substance \ndosing records (EVID=1) intervention type records (EVID=2)\nmight include input data set know \nrun simulation. Modeled events thing (stop \nsimulation execute event time) don’t need know\nprior running simulation. similar MTIME\nfunctionality get NONMEM different syntax \nfunctionality provided.Note way get additional records simulated output.\nRegardless approach level complexity, see modeled\nevents simulated output. always executed hood \nnumber rows simulated output times \nregardless modeled events set discussed .","code":""},{"path":"mtime.html","id":"simple-mtime","chapter":"10 Modeled events","heading":"10.1 Simple MTIME","text":"Use just want introduce non-dose discontinuity \nsimulation specific time. example, want parameter change\nvalue specific time don’t know values times prior\nsimulating.schedule discontinuity, call mtime() member (Section @ref(self.time))\nself object (Section 2.3.12). typically done \n$MAIN block., told mrgsolve stop 14.12 hours can something.\nNotice self.mtime() returns value modeled even time \ncan check later.can also schedule event happen amount time future","code":"[ main ]\ndouble mt = self.mtime(14.12);\n\nif(TIME >= mt) {\n  // do something  \n}[ main ]\nif(NEWIND <= 1) {\n  double mt = 1e9;  \n}\n\nif(EVID==1) {\n  mt = self.mtime(TIME + 8.2);\n}\n\nif(TIME >= mt) {\n  // do something  \n}"},{"path":"mtime.html","id":"mtime-with-specific-evid","chapter":"10 Modeled events","heading":"10.2 MTIME with specific EVID","text":"can call self.mevent() pass time evid check\nEVID comes around . exampleThis similar functionality self.mevent().","code":"self.mevent(TIME + 8.2, 33);\n\nif(EVID==33) {\n  // do something  \n}"},{"path":"mtime.html","id":"modeled-doses","chapter":"10 Modeled events","heading":"10.3 Modeled doses","text":"previous examples showed get simulation stop \ncan something $MAIN. section, show schedule\ndoses similar way. take extra coding also serve\nuncover self.mtime() self.mevent() work.can set following code either $MAIN $TABLE.Create evdata objectOnce know want dose, create evdata object.create (construct) object called ev class evdata. \nconstructor takes two arguments:TIME event happenthe EVID eventThis available constructor evdata objects. can browse\nsource code evdata object\n.Modify evdata object\nobject created, can modify following public memberstime: event time (double)evid: event ID (int)amt: dose amount (double)cmt: compartment number (int)rate: rate infuse amt (double)now: dose given immediately? (bool)using (lower-level) interface, chances want \nset least amt cmt. example, dose 100 mg \ncompartment 2 immediately (now)members set similar way.Push evdata object self objectAfter object created modified, attach object\nself object order make available mrgsolve. \ncalling push_back() self.mevectorAgain, sequence get called either $MAIN $TABLE. \ncode block finishes running (current record), mrgsolve find \nevent record add event simulation sequence.","code":"mrg::evdata ev(14.2, 1);ev.amt = 100;\nev.cmt = 2;\nev.now = true;self.mevector.push_back(ev);"},{"path":"topics.html","id":"topics","chapter":"11 Topics","heading":"11 Topics","text":"","code":""},{"path":"topics.html","id":"topic-annotated","chapter":"11 Topics","heading":"11.1 Annotated model specification","text":"complete annotated mrgsolve model. goal get several\ncommon blocks might want annotate. different code\nblocks rendered separately clarity presentation; users\ninclude relevant blocks single file (R string).","code":"$PROB\n\n# Final PK model\n\n- Author: Pmetrics Scientist\n- Client: Pharmaco, Inc.\n- Date: `r Sys.Date()`\n- NONMEM Run: 12345\n- Structure: one compartment, first order absorption\n- Implementation: closed form solutions\n- Error model: Additive + proportional\n- Covariates:\n  - WT on clearance\n- SEX on volume\n- Random effects on: `CL`, `V`, `KA`[PARAM] @annotated\nTVCL : 1.1   : Clearance (L/hr)\nTVV  : 35.6  : Volume of distribution (L)\nTVKA : 1.35  : Absorption rate constant (1/hr)\nWT   : 70    : Weight (kg)\nSEX  : 1     : Male = 0, Female 1\nWTCL : 0.75  : Exponent weight on CL\nSEXV : 0.878 : Volume female/Volume male[MAIN]\ndouble CL = TVCL*pow(WT/70,WTCL)*exp(ECL);\ndouble V  = TVV *pow(SEXVC,SEX)*exp(EV);\ndouble KA = TVKA*exp(EKA);[OMEGA] @name OMGA @correlation @block @annotated\nECL : 1.23 : Random effect on CL\nEV  : 0.67 0.4 : Random effect on V\nEKA : 0.25 0.87 0.2 : Random effect on KA[SIGMA] @name SGMA @annotated\nPROP: 0.25 : Proportional residual error\nADD : 25   : Additive residual error[CMT] @annotated\nGUT  : Dosing compartment  (mg)\nCENT : Central compartment (mg)[PKMODEL] ncmt = 1, depot=TRUE[TABLE]\ncapture IPRED = CENT/V;\ndouble DV = IPRED*(1+PROP) + ADD;[CAPTURE] @annotated\nDV  : Concentration (mg/L)\nECL : Random effect on CL\nCL  : Individual clearance (L/hr)"},{"path":"topics.html","id":"topic-init","chapter":"11 Topics","heading":"11.2 Set initial conditions","text":"","code":"\nlibrary(mrgsolve)\nlibrary(dplyr)"},{"path":"topics.html","id":"summary","chapter":"11 Topics","heading":"11.2.1 Summary","text":"mrgsolve keeps base list compartments initial conditions \ncan update either R inside model specificationWhen use $CMT, value base list assumed 0 \nevery compartmentmrgsolve default use values base list starting\nproblemWhen base list available, every individual get \ninitial conditionYou can override base list including code $MAIN set\ninitial conditionMost often, initial calculated function\nparameterFor example, $MAIN RESP_0 = KIN/KOUT; KIN KOUT value $PARAMThis code $MAIN overwrites value base list current IDFor typical PK/PD type models, frequently initialize $MAINThis equivalent might NONMEM modelFor larger systems models, often just set initial value via base list","code":""},{"path":"topics.html","id":"make-a-model-only-to-examine-init-behavior","chapter":"11 Topics","heading":"11.2.2 Make a model only to examine init behavior","text":"Note: IFLAG invention demo. demo always responsible\nsetting interpreting value (reserved way \nmrgsolve control value).demoCompartment initial condition defaults 0Compartment initial condition get set BASE IFLAG  > 0Compartment always stays initial conditionCheck initial conditionNote:used $CMT model spec; implies base initial\ncondition set 0In chunk, code $MAIN doesn’t get run IFLAG 0So, don’t update something $MAIN initial condition \nset base listNext, update base initial condition 50Note:code $MAIN still doesn’t get run IFLAG 0Now, turn IFLAGNote:Now, code $MAIN gets runA_0 set value BASE","code":"\ncode <- '\n$PARAM BASE=100, IFLAG = 0\n\n$CMT A\n\n$MAIN\n\nif(IFLAG > 0) A_0 = BASE;\n\n$ODE dxdt_A = 0;\n'\nmod <- mcode(\"init\",code)\ninit(mod). \n.  Model initial conditions (N=1):\n.  name    value . name    value\n.  A (1)   0     | . ...   .\nmod %>% mrgsim %>% plot\nmod %>% init(A = 50) %>% mrgsim %>% plot\nmod %>% param(IFLAG=1) %>% mrgsim %>% plot\nmod %>% param(IFLAG=1, BASE=300) %>% mrgsim %>% plot"},{"path":"topics.html","id":"example-pkpd-model-with-initial-condition","chapter":"11 Topics","heading":"11.2.3 Example PK/PD model with initial condition","text":"Just clear, need set sort flag set initial\ncondition seen :initial condition set 40 per values KIN KOUTEven change RESP_0 R, calculation $MAIN gets final say","code":"\ncode <- '\n$PARAM AUC=0, AUC50 = 75, KIN=200, KOUT=5\n\n$CMT RESP\n\n$MAIN \nRESP_0 = KIN/KOUT;\n\n$ODE\n\ndxdt_RESP = KIN*(1-AUC/(AUC50+AUC)) - KOUT*RESP;\n\n'\nmod <- mcode(\"init2\", code)\nmod %>% mrgsim %>% plot\nmod %>% init(RESP=1E9) %>% mrgsim. Model:  init2 \n. Dim:    25 x 3 \n. Time:   0 to 24 \n. ID:     1 \n.     ID time RESP\n. 1:   1    0   40\n. 2:   1    1   40\n. 3:   1    2   40\n. 4:   1    3   40\n. 5:   1    4   40\n. 6:   1    5   40\n. 7:   1    6   40\n. 8:   1    7   40"},{"path":"topics.html","id":"remember-calling-init-will-let-you-check-to-see-what-is-going-on","chapter":"11 Topics","heading":"11.2.4 Remember: calling init will let you check to see what is going on","text":"’s good idea get habit things aren’t clearinit first takes base initial condition list, calls $MAIN \ncalculation ; result calculated initials","code":"\ninit(mod). \n.  Model initial conditions (N=1):\n.  name       value . name    value\n.  RESP (1)   0     | . ...   .\nmod %>% param(KIN=100) %>% init. \n.  Model initial conditions (N=1):\n.  name       value . name    value\n.  RESP (1)   0     | . ...   ."},{"path":"topics.html","id":"set-initial-conditions-via-idata","chapter":"11 Topics","heading":"11.2.5 Set initial conditions via idata","text":"Go back house modelNotesIn idata (), include column CMT_0 (like ’d $MAIN).ID simulated, idata value override base initial\nlist subject.note CMT_0 set $MAIN, override idata\nupdate.","code":"\nmod <- mrgsolve:::house()\ninit(mod). \n.  Model initial conditions (N=3):\n.  name       value . name       value\n.  CENT (2)   0     | RESP (3)   50   \n.  GUT (1)    0     | . ...      .\nidata <- expand.idata(CENT_0 = seq(0,25,1))\nidata %>% head.   ID CENT_0\n. 1  1      0\n. 2  2      1\n. 3  3      2\n. 4  4      3\n. 5  5      4\n. 6  6      5\nout <- \n  mod %>% \n  idata_set(idata) %>% \n  mrgsim(end=40)\nplot(out, CENT~.)"},{"path":"topics.html","id":"topic-parameter-update","chapter":"11 Topics","heading":"11.3 Updating parameters","text":"parameter list introduced section 1.1 \n$PARAM code block shown 2.2.4. model compiled,\nnames number parameters model fixed. However, values \nparameters can changed: parameters may updated either user (R)\nmrgsolve (C++ simulation engine, simulation proceeds).update R, use param() function (see examples )mrgsolve update parameters, attach columns data set\n(either data_set idata_set) name items parameter\nlistBoth methods discussed illustrated following sections.","code":""},{"path":"topics.html","id":"parameter-update-hierarchy","chapter":"11 Topics","heading":"11.3.1 Parameter update hierarchy","text":"noted , new parameter values can come three potential sources:Modification (base) parameter listA column idata_set name model parameterA column data_set name model parameterThese sources new parameter values discussed . note \nsources listed listed order parameter update\nhierarchy. , base parameter list provides value default. \nparameter value coming idata_set override value base\nlist. parameter value coming data_set override value\ncoming base list idata_set (case parameter listed \nidata_set data_set). words, hierarchy :base parameter list defaultthe idata_set overrides base listthe data_set overrides idata_set base listThe parameter update hierarchy discussed following sections.Base parameter setEvery model base set “parameters”named set $PARAMParameters can get parameter list $PARAM ($THETA)changing names numbers parameters model compiledBut, several ways change valuesThe base parameter set defaultThe base parameter set allows run model without entering \ndata; default values place.parameters base list can changed updated RUse param() function set get:whatever ’ve done R, base set (values) use.\nSee section 11.3.2 detailed discussion\nusing param() updated base list.Parameters can also updated simulation runParameters can updated putting columns idata set data_set \nname one parameters parameter list. \nchanging values base parameter set simulation starts.\n, following model specification compile:-write value parameter model specification.\nLet mrgsolve updating.mrgsolve always reverts base parameter set starting work \nnew individual.Parameters updated idata_setWhen mrgsolve finds parameters idata, update base parameter\nlist parameters prior starting individual.Notice several columns exidata match names\nparameter listThe matching names tell mrgsolve update, assigning individual\nindividual parameter.Parameters updated data_setLike idata set, can put parameters data setThis time-varying parameters:information time-varying covariates\n(parameters), see sections 11.8 7.Parameters carried back first record isn’t time == 0What ?first data record happens time==24Since data set doesn’t start time==5, might think CL\ndoesn’t change base parameter set .default, mrgsolve carries parameter values back start \nsimulation. design … far useful configuration.wanted base parameter set play first data set record,\n:work?, ’ll pass data_set idata_set \nconflicting values parameters.data set always gets last word.","code":"\ncode <- '\n$VCMT KYLE\n$PARAM CL = 1.1, VC=23.1, KA=1.7, KM=10\n$CAPTURE CL VC KA KM\n'\nmod <- mcode(\"tmp\", code, warn=FALSE)\nparam(mod). \n.  Model parameters (N=4):\n.  name value . name value\n.  CL   1.1   | KM   10   \n.  KA   1.7   | VC   23.1\nmod <-  param(mod, CL=2.1)\nparam(mod). \n.  Model parameters (N=4):\n.  name value . name value\n.  CL   2.1   | KM   10   \n.  KA   1.7   | VC   23.1$PARAM CL = 2\n\n$MAIN CL = 3; // ERROR\ndata(exidata)\nhead(exidata).   ID    CL    VC     KA KOUT  IC50 FOO\n. 1  1 1.050 47.80 0.8390 2.45 1.280   4\n. 2  2 0.730 30.10 0.0684 2.51 1.840   6\n. 3  3 2.820 23.80 0.1180 3.88 2.480   5\n. 4  4 0.552 26.30 0.4950 1.18 0.977   2\n. 5  5 0.483  4.36 0.1220 2.35 0.483  10\n. 6  6 3.620 39.80 0.1260 1.89 4.240   1\nnames(exidata). [1] \"ID\"   \"CL\"   \"VC\"   \"KA\"   \"KOUT\" \"IC50\" \"FOO\"\nnames(param(mod)). [1] \"CL\" \"VC\" \"KA\" \"KM\"\nout <- \n  mod %>%\n  idata_set(exidata) %>%\n  mrgsim(end=-1 , add=c(0,2))\nout. Model:  tmp \n. Dim:    20 x 7 \n. Time:   0 to 2 \n. ID:     10 \n.     ID time KYLE    CL   VC     KA KM\n. 1:   1    0    0 1.050 47.8 0.8390 10\n. 2:   1    2    0 1.050 47.8 0.8390 10\n. 3:   2    0    0 0.730 30.1 0.0684 10\n. 4:   2    2    0 0.730 30.1 0.0684 10\n. 5:   3    0    0 2.820 23.8 0.1180 10\n. 6:   3    2    0 2.820 23.8 0.1180 10\n. 7:   4    0    0 0.552 26.3 0.4950 10\n. 8:   4    2    0 0.552 26.3 0.4950 10\ndata <- expand.ev(amt=0, CL=c(1,2,3), VC=30)\nout <- \n  mod %>%\n  data_set(data) %>% \n  obsonly %>%\n  mrgsim(end=-1, add=c(0,2))\nout. Model:  tmp \n. Dim:    6 x 7 \n. Time:   0 to 2 \n. ID:     3 \n.     ID time KYLE CL VC  KA KM\n. 1:   1    0    0  1 30 1.7 10\n. 2:   1    2    0  1 30 1.7 10\n. 3:   2    0    0  2 30 1.7 10\n. 4:   2    2    0  2 30 1.7 10\n. 5:   3    0    0  3 30 1.7 10\n. 6:   3    2    0  3 30 1.7 10\ndata <- \n  data_frame(CL=seq(1,5)) %>%\n  mutate(evid=0,ID=1,cmt=1,time=CL-1,amt=0). Warning: `data_frame()` was deprecated in tibble 1.1.0.\n. ℹ Please use `tibble()` instead.\nmod %>%\n  data_set(data) %>%\n  mrgsim(end=-1). Model:  tmp \n. Dim:    5 x 7 \n. Time:   0 to 4 \n. ID:     1 \n.     ID time KYLE CL   VC  KA KM\n. 1:   1    0    0  1 23.1 1.7 10\n. 2:   1    1    0  2 23.1 1.7 10\n. 3:   1    2    0  3 23.1 1.7 10\n. 4:   1    3    0  4 23.1 1.7 10\n. 5:   1    4    0  5 23.1 1.7 10\ndata <- expand.ev(amt=100,time=24,CL=5,VC=32)\ndata.   ID time amt cmt evid CL VC\n. 1  1   24 100   1    1  5 32\nmod %>% \n  data_set(data) %>%\n  mrgsim(end=-1, add=c(0,2)). Model:  tmp \n. Dim:    3 x 7 \n. Time:   0 to 24 \n. ID:     1 \n.     ID time KYLE CL VC  KA KM\n. 1:   1    0    0  5 32 1.7 10\n. 2:   1    2    0  5 32 1.7 10\n. 3:   1   24  100  5 32 1.7 10\nmod %>%\n  data_set(data) %>%\n  mrgsim(end=-1,add=c(0,2), filbak=FALSE). Model:  tmp \n. Dim:    3 x 7 \n. Time:   0 to 24 \n. ID:     1 \n.     ID time KYLE CL VC  KA KM\n. 1:   1    0    0  5 32 1.7 10\n. 2:   1    2    0  5 32 1.7 10\n. 3:   1   24  100  5 32 1.7 10\nidata <- do.call(\"expand.idata\", as.list(param(mod)))\n\nidata.   ID  CL   VC  KA KM\n. 1  1 2.1 23.1 1.7 10\nmod %>%\n  data_set(data) %>%\n  idata_set(idata) %>%\n  mrgsim(end=-1,add=c(0,2)). Model:  tmp \n. Dim:    3 x 7 \n. Time:   0 to 24 \n. ID:     1 \n.     ID time KYLE CL VC  KA KM\n. 1:   1    0    0  5 32 1.7 10\n. 2:   1    2    0  5 32 1.7 10\n. 3:   1   24  100  5 32 1.7 10"},{"path":"topics.html","id":"topic-parameter-update-base","chapter":"11 Topics","heading":"11.3.2 Updating the base parameter list","text":"previous sectionUpdate name-value pairsWe can call param() update model object, directly naming parameter\nupdate new value takeThe parameter list can also updated scanning names listmrgsolve looks names drive update. KYLE (compartment name)\nMN (model anywhere) ignored.Alternatively, can pick row data frame provide input \nupdateHere second row data frame drives update. names ignored.warning issued update attempted, matching names found","code":"\nparam(mod). \n.  Model parameters (N=4):\n.  name value . name value\n.  CL   2.1   | KM   10   \n.  KA   1.7   | VC   23.1\nmod %>% param(CL = 777, KM = 999) %>% param. \n.  Model parameters (N=4):\n.  name value . name value\n.  CL   777   | KM   999  \n.  KA   1.7   | VC   23.1\nwhat <- list(CL = 555, VC = 888, KYLE = 123, MN = 100)\n\nmod %>% param(what) %>% param. \n.  Model parameters (N=4):\n.  name value . name value\n.  CL   555   | KM   10   \n.  KA   1.7   | VC   888\nd <- data_frame(CL=c(9,10), VC=c(11,12), KTB=c(13,14))\n\nmod %>% param(d[2,]) %>% param. \n.  Model parameters (N=4):\n.  name value . name value\n.  CL   10    | KM   10   \n.  KA   1.7   | VC   12\nmod %>% param(ZIP = 1, CODE = 2) %>% paramWarning message:\nFound nothing to update: param "},{"path":"topics.html","id":"topic-tgrid","chapter":"11 Topics","heading":"11.4 Time grid objects","text":"Simulation times mrgsolvemrgsolve keeps track simulation start end time fixed size\nstep start end (called delta). mrgsolve also keeps \narbitrary vector simulation times called add.tgrid objectsThe tgrid object abstracts setup allows us make complicated\nsampling designs elementary building blocks.Make day 1 sampling intensive sampling around peak sparser otherwiseUse c operator combine simpler designs complicated designsCheck calling stimePass object mrgsim tgrid. override default\nstart/end/delta/add sequence.Now, look day 1 day 10:Adding number tgrid object offset times amount.Pick day 5 well","code":"\nmod <- mrgsolve:::house() %>% Req(CP) %>% ev(amt=1000,ii=24, addl=1000) \nmod %>%\n  mrgsim(end=4,delta=2,add=c(7,9,50)) %>%\n  as.data.frame.   ID time       CP\n. 1  1    0  0.00000\n. 2  1    0  0.00000\n. 3  1    2 42.47580\n. 4  1    4 42.28701\n. 5  1    7 36.75460\n. 6  1    9 33.26649\n. 7  1   50 60.97754\npeak1 <- tgrid(1,4,0.1)\nsparse1 <- tgrid(0,24,4)\nday1 <- c(peak1,sparse1)\nstime(day1).  [1]  0.0  1.0  1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2.0  2.1  2.2  2.3\n. [16]  2.4  2.5  2.6  2.7  2.8  2.9  3.0  3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8\n. [31]  3.9  4.0  8.0 12.0 16.0 20.0 24.0\nmod %>% \n  mrgsim(tgrid=day1) %>%\n  plot(type='b')\ndes <- c(day1, day1+10*24)\n\nmod %>% \n  mrgsim(tgrid=des) %>%\n  plot(type='b')\ndes <- c(des, day1+5*24)\n\nmod %>% \n  mrgsim(tgrid=des) %>%\n  plot(type='b')"},{"path":"topics.html","id":"topic-designs","chapter":"11 Topics","heading":"11.5 Individualized sampling designs","text":"PopPK model full data_set.Now, define two time grid objects: des1 runs 0 24 des2 runs \n0 96, every hour.Now, derive idata_set adding grouping column (GRP) splits\ndata set two groupsNow, two groups GRP idata_set two tgrid objects.Pass idata_set data_setCall designIdentify GRP descol; column must idata_setPass list designs; must least two two levels GRPWhen simulate, individuals GRP 1 get des1 GRP 2 get des2","code":"\nmod <- mrgsolve:::house()\n\ndata(exTheoph)\n\ndf <- exTheoph\n\nhead(df).   ID   WT Dose time  conc cmt  amt evid\n. 1  1 79.6 4.02 0.00  0.00   1 4.02    1\n. 2  1 79.6 4.02 0.25  2.84   0 0.00    0\n. 3  1 79.6 4.02 0.57  6.57   0 0.00    0\n. 4  1 79.6 4.02 1.12 10.50   0 0.00    0\n. 5  1 79.6 4.02 2.02  9.66   0 0.00    0\n. 6  1 79.6 4.02 3.82  8.58   0 0.00    0\nmod %>% \n  Req(CP) %>%\n  carry.out(a.u.g) %>%\n  data_set(df) %>%\n  obsaug %>%\n  mrgsim . Model:  housemodel \n. Dim:    5904 x 4 \n. Time:   0 to 120 \n. ID:     12 \n.     ID time a.u.g      CP\n. 1:   1 0.00     1 0.00000\n. 2:   1 0.00     0 0.00000\n. 3:   1 0.25     1 0.04552\n. 4:   1 0.25     0 0.04552\n. 5:   1 0.50     1 0.07870\n. 6:   1 0.57     0 0.08624\n. 7:   1 0.75     1 0.10274\n. 8:   1 1.00     1 0.12001\ndes1 <- tgrid(0,24,1)\ndes2 <- tgrid(0,96,1)\n\nrange(stime(des1)). [1]  0 24\nrange(stime(des2)). [1]  0 96\ndf <-  mutate(df, GRP = as.integer(ID > 5))\n\nid <- df %>% distinct(ID,GRP) \n\nid.    ID GRP\n. 1   1   0\n. 2   2   0\n. 3   3   0\n. 4   4   0\n. 5   5   0\n. 6   6   1\n. 7   7   1\n. 8   8   1\n. 9   9   1\n. 10 10   1\n. 11 11   1\n. 12 12   1\nout <- \n  mod %>% \n  Req(CP) %>%\n  carry.out(a.u.g,GRP) %>%\n  idata_set(id) %>%\n  data_set(df) %>%\n  design(descol=\"GRP\", deslist=list(des1,des2)) %>%\n  obsaug %>%\n  mrgsim \n\nplot(out, CP~time|GRP)"},{"path":"topics.html","id":"some-helpful-c","chapter":"11 Topics","heading":"11.6 Some helpful C++","text":"Recall following blocks require valid C++ code:$PREAMBLE$MAIN$ODE$TABLE$GLOBAL$PREDWe don’t want users proficient C++ able use mrgsolve.\n’ve created several macros help simplify things much possible.\nHowever, required become familiar basics certainly\nadditional knowledge just basics help \ncode complicated models mrgsolve.unending stream tutorials, references help pages C++\nfound interweb. general source, like use\nhttps://en.cppreference.com/. , , many good resources\ncan suit needs.rest section provides general reference types \nC++ code functions might using model.","code":""},{"path":"topics.html","id":"semi-colons","chapter":"11 Topics","heading":"11.6.1 Semi-colons","text":"Every statement C++ must end semi-colon. example;","code":"[ MAIN ] \ndouble CL = exp(log_TVCL + ETA(1));[ ODE ] \n\ndxdt_DEPOT = -KA * DEPOT;"},{"path":"topics.html","id":"if-else","chapter":"11 Topics","heading":"11.6.2 if-else","text":"equivalent x <- ifelse(c == 4, 8, 10) R","code":"if(a == 2) b = 2;if(a==2) {\n  b = 2;  \n}if(a == 2) {\n  b=2;\n} else {\n  b=3;\n}double x = c == 4 ? 8 : 10;"},{"path":"topics.html","id":"functions","chapter":"11 Topics","heading":"11.6.3 Functions","text":"following functions hopefully understandable based function\nname. Consult https://cppreference.com details.","code":"# base^exponent\ndouble d = pow(base,exponent);\n\ndouble e = exp(3);\n\n# absolute value\ndouble f = fabs(-4);\n\ndouble g = sqrt(5);\n\ndouble h = log(6);\n\ndouble i = log10(7);\n\ndouble j = floor(4.2);\n\ndouble k = ceil(4.2);\n\ndouble l = std::max(0.0, -3.0);\n\ndouble m = std::min(0.0, -3.0);"},{"path":"topics.html","id":"integer-division","chapter":"11 Topics","heading":"11.6.4 Integer division","text":"user warned division two integers. R, following\nstatement evaluates 0.75:C++ evaluates 0:3 4 taken integer literals. \nproduces result asWhen one integer divided another integer, remainder discarded (\nresult rounded ). way C++ works. user warned.Note parameters mrgsolve doubles evaluate 0.75Since parameter operation /4 integer division \nresult 0.75.Unless already comfortable concept, users encouraged\nadd .0 suffix literal number written C++ code. example:think ’s fair say vast majority time want \nevaluate 0.75 writing 3.0/4.0 rather 3/4 ensure \ndiscard remainder .like experiment concepts, try running code","code":"\n3/4. [1] 0.75double x = 3/4;int a = 3;\nint b = 4;\ndouble x = a/b;[ PARAM ] a = 3\n\n[ MAIN ] \ndouble x = a/4;double x = 3.0 / 4.0;\nlibrary(mrgsolve)\n\ncode <- '\n[ param ] a = 3\n\n[ main ] \ncapture x = 3/4;\ncapture y = 3.0/4.0;\ncapture z = a/4;\n'\nmod <- mcode(\"foo\", code)\n\nmrgsim(mod). Model:  foo \n. Dim:    25 x 5 \n. Time:   0 to 24 \n. ID:     1 \n.     ID time x    y    z\n. 1:   1    0 0 0.75 0.75\n. 2:   1    1 0 0.75 0.75\n. 3:   1    2 0 0.75 0.75\n. 4:   1    3 0 0.75 0.75\n. 5:   1    4 0 0.75 0.75\n. 6:   1    5 0 0.75 0.75\n. 7:   1    6 0 0.75 0.75\n. 8:   1    7 0 0.75 0.75"},{"path":"topics.html","id":"pre-processor-directives","chapter":"11 Topics","heading":"11.6.5 Pre-processor directives","text":"Pre-processor directives global substitutions made \nmodel code time model compiled. exampleWhen write model, pre-processor find every\ninstance CP replace (CENT/VC). substitution\nhappens right model compiled; won’t see substitution happen\nanywhere, think literal replacement CP (CENT/VC).Note:Put pre-processor directives $GLOBAL.usually good idea enclose substituted coded parentheses;\nensures , example, CENT/VC evaluated , regardless \nsurrounding code evaluated.hood, mrgsolve uses lots pre-processor directives define\nparameter names, compartment names variables; see compiler\nerror try re-define existing pre-processor directive. ,\njust choose another name directive.","code":"$GLOBAL \n\n#define CP (CENT/VC)"},{"path":"topics.html","id":"resimulate-eta-and-eps","chapter":"11 Topics","heading":"11.7 Resimulate ETA and EPS","text":"Call simeps(n) resimulate ETANo $PLUGIN requiredsimeta(n) takes single argument (n), ETA number resimulateFor example, can simulate individual-level covariates\nwithin certain range:Call simeps(n) resimulate EPSNo $PLUGIN requiredsimeps() takes single argument (n), EPS number resimulateFor example, can resimulate \nconcentrations greater zero:safety check recommended\nNote examples, implement safety check: integer counter \nincremented every time resimulated. resimulation process stops \ndon’t reach desired condition within 100 replicates. might also\nconsider issuing message flag simulated data able\nreach desired condition.","code":"\ncode <- '\n$PARAM TVCL = 1, TVWT = 70\n\n$MAIN \ncapture WT = TVWT*exp(EWT);\n\nint i = 0;\n\nwhile((WT < 60) || (WT > 80)) {\n  if(++i > 100) break;\n  simeta(1);\n  WT = TVWT*exp(EWT);\n}\n\n$OMEGA @labels EWT\n4\n\n$CAPTURE EWT WT\n'\n\nmod <- mcode(\"simeta\", code)\n\nout <- mod %>% mrgsim(nid=100, end=-1)\n\nsum <- summary(out)\n\nsum.        ID              time        EWT                  WT       \n.  Min.   :  1.00   Min.   :0   Min.   :-0.152612   Min.   :60.09  \n.  1st Qu.: 25.75   1st Qu.:0   1st Qu.:-0.087695   1st Qu.:64.12  \n.  Median : 50.50   Median :0   Median :-0.008377   Median :69.42  \n.  Mean   : 50.50   Mean   :0   Mean   :-0.014730   Mean   :69.22  \n.  3rd Qu.: 75.25   3rd Qu.:0   3rd Qu.: 0.052240   3rd Qu.:73.75  \n.  Max.   :100.00   Max.   :0   Max.   : 0.131802   Max.   :79.86\ncode <- '\n$PARAM CL = 1, V = 20,\n\n$CMT CENT\n\n$SIGMA 50\n\n$PKMODEL ncmt=1\n\n$TABLE\ncapture CP = CENT/V + EPS(1);\n\nint i = 0;\n\nwhile(CP < 0 && i < 100) {\n  simeps(1);\n  CP = CENT/V + EPS(1);\n  ++i;\n}\n\n'\n\nmod <- mcode(\"simeps\", code)\n\nout <- mod %>% ev(amt=100) %>% mrgsim(end=48)\nsum <- summary(out)\n\nsum.        ID         time            CENT              CP          \n.  Min.   :1   Min.   : 0.00   Min.   :  0.00   Min.   : 0.08813  \n.  1st Qu.:1   1st Qu.:11.25   1st Qu.: 15.93   1st Qu.: 2.19641  \n.  Median :1   Median :23.50   Median : 29.38   Median : 4.24709  \n.  Mean   :1   Mean   :23.52   Mean   : 37.47   Mean   : 5.85879  \n.  3rd Qu.:1   3rd Qu.:35.75   3rd Qu.: 54.21   3rd Qu.: 8.32122  \n.  Max.   :1   Max.   :48.00   Max.   :100.00   Max.   :18.84995"},{"path":"topics.html","id":"topics-time-varying","chapter":"11 Topics","heading":"11.8 Time varying covariates","text":"note previous section showed implement time-varying covariates \ntime-varying parameters including parameters column \ndata set.default, mrgsolve performs next observation carried backward (nocb) \nprocessing time-varying covariates. , system advances \nTIME1 TIME2, advance function covariate found \ndata set, system advances using covariate value COV2 rather \ncovariate COV1.user can change behavior last observation carried forward (locf),\nsystem uses value COV1 advance TIME1 TIME2.\nuse locf advance, set nocb FALSE calling mrgsim. \nexample,additional information sequence events takes place\nsystem advance section 7.","code":"\nmod %>% mrgsim(nocb = FALSE)"},{"path":"q-and-a.html","id":"q-and-a","chapter":"12 Questions and Answers","heading":"12 Questions and Answers","text":"’m using chapter place provide miscellaneous information \nmight obvious place live. ’d call FAQ, \nquestions asked frequently .","code":""},{"path":"q-and-a.html","id":"can-i-interrupt-a-simulation","chapter":"12 Questions and Answers","heading":"12.1 Can I interrupt a simulation?","text":"Starting mrgsolve version 0.11.1, can interrupt long simulation\npressing Control-C Esc, standard way pass interrupt signal\nR. mrgsolve stop every often look interrupt signal.can control frequency mrgsolve looks interrupt\nsignal argument mrgsim (default: 256 simulation records).\nIncrease check less frequently, increase check frequently (might\nneeded model large amount work required advance one\nstep) set negative number never check.","code":""},{"path":"q-and-a.html","id":"can-i-pass-compiler-flags-to-my-model","chapter":"12 Questions and Answers","heading":"12.2 Can I pass compiler flags to my model?","text":"Compiler flags can passed model setting PKG_CXXFLAGS \n$ENV. examplewill compile model according C++11 standard (note \nspecial plugin automatically ; see Section\n9.4).","code":"$ENV\nPKG_CXXFLAGS = \"-std=c++11\""},{"path":"q-and-a.html","id":"can-i-compile-my-model-with-c11","chapter":"12 Questions and Answers","heading":"12.3 Can I compile my model with C++11?","text":"Yes, can invoking CXX11 plugin (Section 9.4).","code":""},{"path":"q-and-a.html","id":"how-can-i-calculate-time-after-dose","chapter":"12 Questions and Answers","heading":"12.4 How can I calculate time after dose?","text":"three approachestad argument mrgsim()get time dose output can calland output tad column. Note let interact\ntad value inside model.Simple calculation modelMost applications call self.tad() (Section @ref(self.tad)). exampleMore complicated calculation modelYou can get control track tad specific compartment using\ntad plugin. See Section 9.3 details.","code":"\nmrgsim(mod, tad = TRUE)[ main ] \ndouble tad = self.tad();"},{"path":"q-and-a.html","id":"my-model-failed-to-compile-what-now","chapter":"12 Questions and Answers","heading":"12.5 My model failed to compile; what now?","text":"model can fail compile variety reasons, including error\nC++ code inability R find compiler pieces \ntool chain.model compiling, try recover argument mread() (\nmcode())see warning console mread() return list \nbuild information. can look information share \nmrgsolve issue tracker\nGitHub.model C++ syntax problems, errors printed \nconsole. possibly problems compiler rest \ntoolchain, take look pkgbuild package, provides helpful\ntools, especially working Windows platform","code":"\nmod <- mread(..., recover = TRUE)\npkgbuild::check_build_tools()\npkgbuild::has_build_tools()\npkgbuild::has_rtools()"},{"path":"q-and-a.html","id":"can-i-run-mrgsolve-on-a-network-drive","chapter":"12 Questions and Answers","heading":"12.6 Can I run mrgsolve on a network drive?","text":"; run mrgsolve network drive. R installation, mrgsolve\ninstallation, R working directory local hard disk.","code":""},{"path":"q-and-a.html","id":"can-i-run-mrgsolve-on-a-cloud-synced-folder","chapter":"12 Questions and Answers","heading":"12.7 Can I run mrgsolve on a cloud-synced folder?","text":"; run mrgsolve synced folder cloud services like OneDrive,\nGoogleDrive, DropBox etc. R installation, mrgsolve installation, R\nworking directory local hard disk.","code":""},{"path":"q-and-a.html","id":"can-i-run-mrgsolve-in-a-path-that-includes-spaces","chapter":"12 Questions and Answers","heading":"12.8 Can I run mrgsolve in a path that includes spaces?","text":"; run mrgsolve path includes spaces. R installation,\nmrgsolve installation, R working directory locations\nwhose paths include spaces.","code":""},{"path":"install.html","id":"install","chapter":"13 Installation","heading":"13 Installation","text":"date installation instructions can found github site:https://github.com/metrumresearchgroup/mrgsolve/\nhttps://github.com/metrumresearchgroup/mrgsolve/wiki/mrgsolve-Installation","code":""}]
